/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   server: () => (/* binding */ server)\n/* harmony export */ });\n/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chalk */ \"chalk\");\n/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(chalk__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var connect_timeout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! connect-timeout */ \"connect-timeout\");\n/* harmony import */ var connect_timeout__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(connect_timeout__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var cors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cors */ \"cors\");\n/* harmony import */ var cors__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(cors__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! express */ \"express\");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(express__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var helmet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! helmet */ \"helmet\");\n/* harmony import */ var helmet__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(helmet__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var morgan__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! morgan */ \"morgan\");\n/* harmony import */ var morgan__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(morgan__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var swagger_ui_express__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! swagger-ui-express */ \"swagger-ui-express\");\n/* harmony import */ var swagger_ui_express__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(swagger_ui_express__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var xss_clean__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! xss-clean */ \"xss-clean\");\n/* harmony import */ var xss_clean__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(xss_clean__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _config_database__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./config/database */ \"./src/config/database.ts\");\n/* harmony import */ var _routes_routes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./routes/routes */ \"./src/routes/routes.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils */ \"./src/utils/index.ts\");\n/**\n * Module dependencies.\n */\n\n // Express v4\n\n\n\n\n\n\n\nconst swaggerJSDoc = __webpack_require__(/*! swagger-jsdoc */ \"swagger-jsdoc\");\n\n\n\n/**\n * Authenticate database connection\n */\n_config_database__WEBPACK_IMPORTED_MODULE_9__.sequelize.authenticate()\n    // tslint:disable-next-line: no-console\n    .then(() => console.log('%s Database connected successfully!', chalk__WEBPACK_IMPORTED_MODULE_0__.green('✓')))\n    // tslint:disable-next-line: no-any\n    .catch((error) => {\n    console.error('Database authenticaion error...');\n    console.log('DB error: ', error);\n    process.exit();\n});\n// Configure the app to use Swagger\nconst swaggerOptions = {\n    swaggerDefinition: {\n        openapi: '3.0.0',\n        info: {\n            title: 'My Express.js API',\n            version: '1.0.0',\n            description: 'A sample Express.js API built with TypeScript and Swagger',\n        },\n    },\n    apis: ['./src/swaggerDocs/*.yaml'],\n};\nconst swaggerDocs = swaggerJSDoc(swaggerOptions);\n/**\n * Create Express server.\n */\nconst app = express__WEBPACK_IMPORTED_MODULE_3__();\napp.use('/swagger', swagger_ui_express__WEBPACK_IMPORTED_MODULE_7__.serve, swagger_ui_express__WEBPACK_IMPORTED_MODULE_7__.setup(swaggerDocs));\n/**\n * Timeout confg\n */\napp.use(connect_timeout__WEBPACK_IMPORTED_MODULE_1__('12000000'));\napp.use(haltOnTimedout);\nfunction haltOnTimedout(req, _res, next) {\n    if (!req.timedout) {\n        next();\n    }\n}\n/**\n * Express configuration.\n */\napp.set('host', process.env.OPENSHIFT_NODEJS_IP || '0.0.0.0');\napp.set('port', process.env.PORT || 8081);\napp.set('env', process.env.NODE_ENVR || 'development');\napp.use(morgan__WEBPACK_IMPORTED_MODULE_6__('dev'));\napp.use(express__WEBPACK_IMPORTED_MODULE_3__.urlencoded({ extended: true }));\napp.use(express__WEBPACK_IMPORTED_MODULE_3__.json());\napp.use(helmet__WEBPACK_IMPORTED_MODULE_4__());\napp.use(xss_clean__WEBPACK_IMPORTED_MODULE_8__());\n/**\n * CORS enable\n */\napp.use(cors__WEBPACK_IMPORTED_MODULE_2__());\n/**\n * Routes.\n */\n//app.use('/swagger', swaggerUI.serve,swaggerUI.setup(swaggerSpec));\napp.use('/analytics/api', _routes_routes__WEBPACK_IMPORTED_MODULE_10__.routes);\n/**\n * Error Handler.\n*/\napp.use(_utils__WEBPACK_IMPORTED_MODULE_11__.errorHandler);\nconst server = http__WEBPACK_IMPORTED_MODULE_5__.createServer(app);\n/**\n * Start Express server.\n*/\nserver.listen(app.get('port'), () => {\n    // tslint:disable-next-line: no-console\n    console.log('%s App is running at http://localhost:%d in %s mode', chalk__WEBPACK_IMPORTED_MODULE_0__.green('✓'), app.get('port'), app.get('env'));\n    // tslint:disable-next-line: no-console\n    console.log('  Press CTRL-C to stop\\n');\n});\n\n\n//# sourceURL=webpack://ovada_analytics/./src/app.ts?");

/***/ }),

/***/ "./src/config/codes.ts":
/*!*****************************!*\
  !*** ./src/config/codes.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   responses: () => (/* binding */ responses)\n/* harmony export */ });\nconst responses = {\n    en: {\n        SUCCESS: {\n            message: 'success',\n            status: 200\n        },\n        INTERNAL_SERVER_ERROR: {\n            message: 'Internal server error',\n            status: 500\n        },\n        INVALID_SPECIALITY_IDS: {\n            message: 'Invalid specialty id(s)',\n            status: 406\n        },\n        LOGGED_IN_NOT_FOUND: {\n            message: 'Logged-In User not found!',\n            status: 406\n        },\n        LOGGED_IN_NOT_PROVIDER: {\n            message: 'Logged In user is not a provider.',\n            status: 406\n        },\n        NO_RECORD_FOUND: {\n            message: 'No record exists in the system.',\n            status: 406\n        },\n        UNKNOWN_QUERY_PARAMS: {\n            message: 'Unrecognized query params',\n            status: 406\n        },\n        USER_EXISTS: {\n            message: 'User Already exists',\n            status: 406\n        },\n        validator: {\n            body: {\n                BODY_NOT_EMPTY: 'request body should not empty',\n                DOCTOR_ID_INTEGER: 'doctor_id must be integer',\n                DOCTOR_ID_REQUIRED: 'doctor_id must cannot be empty',\n                SPECIALITY_ID_INTEGER: 'speciality_id must be integer',\n                SPECIALITY_ID_REQUIRED: 'speciality_id cannot be empty',\n                USER_ID_INTEGER: 'user_id must be integer',\n                USER_ID_REQUIRED: 'user_id must cannot be empty',\n            },\n            query: {\n                CASE_IS_NOT_VALID: 'case_id must cannot be integer',\n                CHECK_IS_NOT_VALID: 'check must be [daily, weekly, previous, upcomming]',\n                DATE_IS_NOT_VALID: 'date must be 0000-00-00',\n                PAGE_IS_NOT_VALID: 'page must be integer',\n                PAGINATE_IS_NOT_VALID: 'paginate must be boolean',\n                PATIENT_ID_REQUIRED: 'patient_id must cannot be empty',\n                PER_PAGE_IS_NOT_VALID: 'per_page must be integer',\n                TEST: 'test'\n            }\n        },\n    }\n};\n\n\n//# sourceURL=webpack://ovada_analytics/./src/config/codes.ts?");

/***/ }),

/***/ "./src/config/config.ts":
/*!******************************!*\
  !*** ./src/config/config.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   poolConfig: () => (/* binding */ poolConfig)\n/* harmony export */ });\nconst poolConfig = {\n    development: {\n        acquire: 60000,\n        evict: 10000,\n        idle: 30000,\n        max: 30,\n    },\n    qa: {\n        acquire: 60000,\n        evict: 10000,\n        idle: 30000,\n        max: 5,\n    },\n    staging: {\n        acquire: 60000,\n        evict: 10000,\n        idle: 30000,\n        max: 5,\n    },\n    production: {\n        acquire: 60000,\n        evict: 10000,\n        idle: 30000,\n        max: 5,\n    }\n};\n\n\n//# sourceURL=webpack://ovada_analytics/./src/config/config.ts?");

/***/ }),

/***/ "./src/config/database.ts":
/*!********************************!*\
  !*** ./src/config/database.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sequelize: () => (/* binding */ sequelize)\n/* harmony export */ });\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dotenv */ \"dotenv\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dotenv__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sequelize_typescript__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\n/* harmony import */ var sequelize_typescript__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sequelize_typescript__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models */ \"./src/models/index.ts\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ \"./src/config/config.ts\");\n\n\n\n\ndotenv__WEBPACK_IMPORTED_MODULE_0__.config({ path: '.env' });\nconst sequelize = new sequelize_typescript__WEBPACK_IMPORTED_MODULE_1__.Sequelize(process.env.DATABASE_NAME, process.env.DATABASE_USERNAME, process.env.DATABASE_PASSWORD, {\n    dialect: 'postgres',\n    host: process.env.DATABASE_HOST,\n    logging: process.env.NODE_ENVR === 'local' ? true : false,\n    models: [..._models__WEBPACK_IMPORTED_MODULE_2__.models],\n    pool: _config__WEBPACK_IMPORTED_MODULE_3__.poolConfig[process.env.NODE_ENVR],\n    port: +(process.env.DATABASE_PORT),\n    dialectOptions: {\n        ssl: {\n            require: true,\n            rejectUnauthorized: false,\n        }\n    },\n    replication: {\n        read: [\n            {\n                database: process.env.READ_DATABASE_NAME,\n                host: process.env.READ_DATABASE_HOST,\n                password: process.env.READ_DATABASE_PASSWORD,\n                username: process.env.READ_DATABASE_USERNAME,\n            }\n        ],\n        write: {\n            database: process.env.WRITE_DATABASE_NAME,\n            host: process.env.WRITE_DATABASE_HOST,\n            password: process.env.WRITE_DATABASE_PASSWORD,\n            username: process.env.WRITE_DATABASE_USERNAME,\n        }\n    },\n});\n// export const sequelize = new Sequelize({\n//   database:process.env.WRITE_DATABASE_NAME,\n//   username:  process.env.WRITE_DATABASE_USERNAME,\n//   password:process.env.WRITE_DATABASE_PASSWORD,\n//   host: process.env.WRITE_DATABASE_HOST,\n//   port:Number(process.env.DATABASE_PORT),\n//   dialect: \"postgres\",\n// });\n\n\n//# sourceURL=webpack://ovada_analytics/./src/config/database.ts?");

/***/ }),

/***/ "./src/controllers/Reports/filtercontroller.ts":
/*!*****************************************************!*\
  !*** ./src/controllers/Reports/filtercontroller.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilterController: () => (/* binding */ FilterController)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass FilterController {\n    constructor(filterService) {\n        this.filterService = filterService;\n        this.getFilteredData = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body } = req;\n                const response = yield this.filterService.getFilteredData();\n                res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/controllers/Reports/filtercontroller.ts?");

/***/ }),

/***/ "./src/controllers/Reports/index.ts":
/*!******************************************!*\
  !*** ./src/controllers/Reports/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filtercontroller: () => (/* binding */ filtercontroller),\n/* harmony export */   visitController: () => (/* binding */ visitController)\n/* harmony export */ });\n/* harmony import */ var _services_Reports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/Reports */ \"./src/services/Reports/index.ts\");\n/* harmony import */ var _Reports_visitcontroller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Reports/visitcontroller */ \"./src/controllers/Reports/visitcontroller.ts\");\n/* harmony import */ var _Reports_filtercontroller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Reports/filtercontroller */ \"./src/controllers/Reports/filtercontroller.ts\");\n\n\n\nconst visitController = new _Reports_visitcontroller__WEBPACK_IMPORTED_MODULE_1__.VisitController(_services_Reports__WEBPACK_IMPORTED_MODULE_0__.visitservice);\nconst filtercontroller = new _Reports_filtercontroller__WEBPACK_IMPORTED_MODULE_2__.FilterController(_services_Reports__WEBPACK_IMPORTED_MODULE_0__.filterservice);\n\n\n//# sourceURL=webpack://ovada_analytics/./src/controllers/Reports/index.ts?");

/***/ }),

/***/ "./src/controllers/Reports/visitcontroller.ts":
/*!****************************************************!*\
  !*** ./src/controllers/Reports/visitcontroller.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VisitController: () => (/* binding */ VisitController)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass VisitController {\n    constructor(visitReportService) {\n        this.visitReportService = visitReportService;\n        this.getvisitReport = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body } = req;\n                console.log(\"incoming filtersss\", body);\n                const response = yield this.visitReportService.getVisitReport(body);\n                res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getSummaryReport = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body } = req;\n                const response = yield this.visitReportService.getSummaryReport(body);\n                res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/controllers/Reports/visitcontroller.ts?");

/***/ }),

/***/ "./src/controllers/admin.controller.ts":
/*!*********************************************!*\
  !*** ./src/controllers/admin.controller.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdminController: () => (/* binding */ AdminController)\n/* harmony export */ });\n/* harmony import */ var _utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/requestValidation/request_validation */ \"./src/utils/requestValidation/request_validation.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass AdminController {\n    constructor(adminService) {\n        this.adminService = adminService;\n        this.getSummary = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // console.log(\"anohterone\", req.user.facility_location_ids)\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.adminService.getSummaryChart(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        /*** Retuns top 10 specialities by billed amount*/\n        this.getTopTenSpecialities = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const query = req.body;\n                const requestData = query;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated) {\n                    const response = yield this.adminService.getTopTenBilledSpecialities(query);\n                    console.log(response);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        /** Returing billed amount in comparison with payment received *****/\n        this.getbilledpayment = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const billRecipient = body.recipient_id;\n                delete body.recipient_id;\n                console.log(requestData, 'FFFFFFF');\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    if (billRecipient == 1 || billRecipient == 2 || billRecipient == 3 || billRecipient == 4) {\n                        body.recipient_id = billRecipient;\n                    }\n                    const response = yield this.adminService.getbilledpayments(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                    // console.log(\"Fahad\", body)\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getSumOfAmounts = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body, headers: { authorization } } = req;\n                const billRecipient = body.recipient_id;\n                delete body.recipient_id;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    if (billRecipient == 1 || billRecipient == 2 || billRecipient == 3 || billRecipient == 4) {\n                        body.recipient_id = billRecipient;\n                    }\n                    console.log(\"wwww\", body);\n                    const response = yield this.adminService.getSumOfAmounts(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getRevenue = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // console.log(\"anohterone\", req.user.facility_location_ids)\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.adminService.getRevenueLocation(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getClaimsOverview = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.adminService.getClaimsOverview(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getHigherPayerTypeStats = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    console.log(\"isValidated getHigherPayerTypeStats\", isValidated);\n                    const response = yield this.adminService.getHigherPayerTypeService(body, authorization);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/controllers/admin.controller.ts?");

/***/ }),

/***/ "./src/controllers/global-filters.controller.ts":
/*!******************************************************!*\
  !*** ./src/controllers/global-filters.controller.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GlobalFilterController: () => (/* binding */ GlobalFilterController)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass GlobalFilterController {\n    constructor(__service) {\n        this.__service = __service;\n        this.get = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { headers: { authorization }, query } = req;\n                const response = yield this.__service.get(query, authorization);\n                res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                next();\n                return undefined;\n            }\n            catch (error) {\n                console.error(\"dropdowns error\", error);\n                next(error);\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/controllers/global-filters.controller.ts?");

/***/ }),

/***/ "./src/controllers/index.ts":
/*!**********************************!*\
  !*** ./src/controllers/index.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminController: () => (/* binding */ adminController),\n/* harmony export */   globalFilterController: () => (/* binding */ globalFilterController),\n/* harmony export */   practiceManagerController: () => (/* binding */ practiceManagerController),\n/* harmony export */   providerController: () => (/* binding */ providerController),\n/* harmony export */   userController: () => (/* binding */ userController)\n/* harmony export */ });\n/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services */ \"./src/services/index.ts\");\n/* harmony import */ var _admin_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./admin.controller */ \"./src/controllers/admin.controller.ts\");\n/* harmony import */ var _practice_manager_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./practice.manager.controller */ \"./src/controllers/practice.manager.controller.ts\");\n/* harmony import */ var _provider_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./provider.controller */ \"./src/controllers/provider.controller.ts\");\n/* harmony import */ var _global_filters_controller__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./global-filters.controller */ \"./src/controllers/global-filters.controller.ts\");\n/* harmony import */ var _user_controller__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./user.controller */ \"./src/controllers/user.controller.ts\");\n\n\n\n\n\n\nconst userController = new _user_controller__WEBPACK_IMPORTED_MODULE_5__.UserController(_services__WEBPACK_IMPORTED_MODULE_0__.userService);\nconst globalFilterController = new _global_filters_controller__WEBPACK_IMPORTED_MODULE_4__.GlobalFilterController(_services__WEBPACK_IMPORTED_MODULE_0__.globalService);\nconst adminController = new _admin_controller__WEBPACK_IMPORTED_MODULE_1__.AdminController(_services__WEBPACK_IMPORTED_MODULE_0__.adminService);\nconst providerController = new _provider_controller__WEBPACK_IMPORTED_MODULE_3__.ProviderController(_services__WEBPACK_IMPORTED_MODULE_0__.providerService);\nconst practiceManagerController = new _practice_manager_controller__WEBPACK_IMPORTED_MODULE_2__.PracticeManagerController(_services__WEBPACK_IMPORTED_MODULE_0__.practiceManagerService);\n\n\n//# sourceURL=webpack://ovada_analytics/./src/controllers/index.ts?");

/***/ }),

/***/ "./src/controllers/practice.manager.controller.ts":
/*!********************************************************!*\
  !*** ./src/controllers/practice.manager.controller.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PracticeManagerController: () => (/* binding */ PracticeManagerController)\n/* harmony export */ });\n/* harmony import */ var _utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/requestValidation/request_validation */ \"./src/utils/requestValidation/request_validation.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass PracticeManagerController {\n    constructor(practiceManagerService) {\n        this.practiceManagerService = practiceManagerService;\n        this.getSummary = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // console.log(\"anohterone\", req.user.facility_location_ids)\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.practiceManagerService.getSummaryChart(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getPatientTrends = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // console.log(\"anohterone\", req.user.facility_location_ids)\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.practiceManagerService.getPatientTrends(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getBillStatus = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.practiceManagerService.getBillStatus(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getDenialTypeStats = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    console.log(\"isValidated\", isValidated);\n                    const response = yield this.practiceManagerService.getDenialTypesService(body, authorization);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getAppointmentTrends = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.practiceManagerService.getAppointmentTrends(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getVisitStatus = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.practiceManagerService.getVisitStatus(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getGapDuration = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.practiceManagerService.getGapDuration(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/controllers/practice.manager.controller.ts?");

/***/ }),

/***/ "./src/controllers/provider.controller.ts":
/*!************************************************!*\
  !*** ./src/controllers/provider.controller.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProviderController: () => (/* binding */ ProviderController)\n/* harmony export */ });\n/* harmony import */ var _utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/requestValidation/request_validation */ \"./src/utils/requestValidation/request_validation.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass ProviderController {\n    constructor(providerService) {\n        this.providerService = providerService;\n        this.getSummary = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // console.log(\"anohterone\", req.user.facility_location_ids)\n                console.log(\"in summary provider: \", req.body);\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.providerService.getSummaryChart(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getAppointments = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.providerService.getAppointments(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getAppointmentsAnalysis = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.providerService.getAppointmentsAnalysis(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getBillStatus = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.providerService.getBillStatus(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n        this.getMissingVisitStatus = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { body, headers: { authorization } } = req;\n                const requestData = body;\n                const isValidated = (0,_utils_requestValidation_request_validation__WEBPACK_IMPORTED_MODULE_0__.validateQuery)(requestData);\n                if (isValidated === true) {\n                    const response = yield this.providerService.getMissingVisitStatus(body);\n                    res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                }\n                else {\n                    res.locals.data = { message: isValidated, status: 400 };\n                }\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/controllers/provider.controller.ts?");

/***/ }),

/***/ "./src/controllers/user.controller.ts":
/*!********************************************!*\
  !*** ./src/controllers/user.controller.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UserController: () => (/* binding */ UserController)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass UserController {\n    constructor(__service) {\n        this.__service = __service;\n        this.get = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { headers: { authorization }, query } = req;\n                const response = yield this.__service.get(query, authorization);\n                res.locals.data = { result: { data: response }, message_code: 'SUCCESS' };\n                next();\n                return undefined;\n            }\n            catch (error) {\n                next(error);\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/controllers/user.controller.ts?");

/***/ }),

/***/ "./src/models/globalFilter.ts":
/*!************************************!*\
  !*** ./src/models/globalFilter.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Globals: () => (/* binding */ Globals)\n/* harmony export */ });\n/* harmony import */ var sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\n/* harmony import */ var sequelize_typescript__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__);\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Months;\n(function (Months) {\n    Months[Months[\"January\"] = 0] = \"January\";\n    Months[Months[\"February\"] = 1] = \"February\";\n    Months[Months[\"March\"] = 2] = \"March\";\n    Months[Months[\"April\"] = 3] = \"April\";\n    Months[Months[\"May\"] = 4] = \"May\";\n    Months[Months[\"June\"] = 5] = \"June\";\n    Months[Months[\"July\"] = 6] = \"July\";\n    Months[Months[\"August\"] = 7] = \"August\";\n    Months[Months[\"September\"] = 8] = \"September\";\n    Months[Months[\" October\"] = 9] = \" October\";\n    Months[Months[\" November\"] = 10] = \" November\";\n    Months[Months[\" December\"] = 11] = \" December\";\n})(Months || (Months = {}));\n;\nlet Globals = class Globals extends sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Model {\n};\nGlobals = __decorate([\n    (0,sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Table)({})\n], Globals);\n\n\n\n//# sourceURL=webpack://ovada_analytics/./src/models/globalFilter.ts?");

/***/ }),

/***/ "./src/models/index.ts":
/*!*****************************!*\
  !*** ./src/models/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Globals: () => (/* reexport safe */ _globalFilter__WEBPACK_IMPORTED_MODULE_2__.Globals),\n/* harmony export */   models: () => (/* binding */ models),\n/* harmony export */   user_basic_info: () => (/* reexport safe */ _models_user_basic_info__WEBPACK_IMPORTED_MODULE_1__.user_basic_info),\n/* harmony export */   users: () => (/* reexport safe */ _models_user__WEBPACK_IMPORTED_MODULE_0__.users)\n/* harmony export */ });\n/* harmony import */ var _models_user__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./user */ \"./src/models/user.ts\");\n/* harmony import */ var _models_user_basic_info__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./user_basic_info */ \"./src/models/user_basic_info.ts\");\n/* harmony import */ var _globalFilter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./globalFilter */ \"./src/models/globalFilter.ts\");\n\n\n\n\n\nconst models = [\n    _models_user__WEBPACK_IMPORTED_MODULE_0__.users,\n    _models_user_basic_info__WEBPACK_IMPORTED_MODULE_1__.user_basic_info\n];\n\n\n//# sourceURL=webpack://ovada_analytics/./src/models/index.ts?");

/***/ }),

/***/ "./src/models/user.ts":
/*!****************************!*\
  !*** ./src/models/user.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   users: () => (/* binding */ users)\n/* harmony export */ });\n/* harmony import */ var sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\n/* harmony import */ var sequelize_typescript__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! . */ \"./src/models/index.ts\");\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (undefined && undefined.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\nlet users = class users extends sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Model {\n};\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Boolean)\n], users.prototype, \"allow_multiple_assignment\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Date)\n], users.prototype, \"created_at\", void 0);\n__decorate([\n    (0,sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.ForeignKey)(() => users),\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], users.prototype, \"created_by\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Date)\n], users.prototype, \"deleted_at\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], users.prototype, \"email\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.PrimaryKey,\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.AutoIncrement,\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], users.prototype, \"id\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], users.prototype, \"is_loggedIn\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], users.prototype, \"password\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], users.prototype, \"remember_token\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], users.prototype, \"reset_key\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], users.prototype, \"status\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Date)\n], users.prototype, \"updated_at\", void 0);\n__decorate([\n    (0,sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.ForeignKey)(() => users),\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], users.prototype, \"updated_by\", void 0);\n__decorate([\n    (0,sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.HasOne)(() => ___WEBPACK_IMPORTED_MODULE_1__.user_basic_info),\n    __metadata(\"design:type\", Object)\n], users.prototype, \"userBasicInfo\", void 0);\nusers = __decorate([\n    (0,sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Table)({\n        modelName: 'users',\n        tableName: 'users',\n        timestamps: true,\n        paranoid: true,\n        createdAt: 'created_at',\n        updatedAt: 'updated_at',\n        deletedAt: 'deleted_at'\n    })\n], users);\n\n\n\n//# sourceURL=webpack://ovada_analytics/./src/models/user.ts?");

/***/ }),

/***/ "./src/models/user_basic_info.ts":
/*!***************************************!*\
  !*** ./src/models/user_basic_info.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   user_basic_info: () => (/* binding */ user_basic_info)\n/* harmony export */ });\n/* harmony import */ var sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\n/* harmony import */ var sequelize_typescript__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! . */ \"./src/models/index.ts\");\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (undefined && undefined.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\nvar Gender;\n(function (Gender) {\n    Gender[Gender[\"M\"] = 0] = \"M\";\n    Gender[Gender[\"F\"] = 1] = \"F\";\n    Gender[Gender[\"X\"] = 2] = \"X\";\n})(Gender || (Gender = {}));\nlet user_basic_info = class user_basic_info extends sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Model {\n};\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"address\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"apartment_suite\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], user_basic_info.prototype, \"area_id\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"biography\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"cell_no\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"city\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Date)\n], user_basic_info.prototype, \"created_at\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], user_basic_info.prototype, \"created_by\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"date_of_birth\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Date)\n], user_basic_info.prototype, \"deleted_at\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], user_basic_info.prototype, \"department_id\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], user_basic_info.prototype, \"designation_id\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"emergency_phone\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], user_basic_info.prototype, \"employed_by_id\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], user_basic_info.prototype, \"employment_type_id\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"extension\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"fax\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], user_basic_info.prototype, \"file_id\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"first_name\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Date)\n], user_basic_info.prototype, \"from\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], user_basic_info.prototype, \"gender\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Date)\n], user_basic_info.prototype, \"hiring_date\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.PrimaryKey,\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.AutoIncrement,\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], user_basic_info.prototype, \"id\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"last_name\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"middle_name\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"profile_pic\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"profile_pic_url\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"social_security\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"state\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"title\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Date)\n], user_basic_info.prototype, \"to\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Date)\n], user_basic_info.prototype, \"updated_at\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], user_basic_info.prototype, \"updated_by\", void 0);\n__decorate([\n    (0,sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.ForeignKey)(() => ___WEBPACK_IMPORTED_MODULE_1__.users),\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", Number)\n], user_basic_info.prototype, \"user_id\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"work_phone\", void 0);\n__decorate([\n    sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Column,\n    __metadata(\"design:type\", String)\n], user_basic_info.prototype, \"zip\", void 0);\nuser_basic_info = __decorate([\n    (0,sequelize_typescript__WEBPACK_IMPORTED_MODULE_0__.Table)({\n        modelName: 'user_basic_info',\n        tableName: 'user_basic_info',\n        timestamps: true,\n        paranoid: true,\n        createdAt: 'created_at',\n        updatedAt: 'updated_at',\n        deletedAt: 'deleted_at'\n    })\n], user_basic_info);\n\n\n\n//# sourceURL=webpack://ovada_analytics/./src/models/user_basic_info.ts?");

/***/ }),

/***/ "./src/repositories/index.ts":
/*!***********************************!*\
  !*** ./src/repositories/index.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   userRepository: () => (/* binding */ userRepository)\n/* harmony export */ });\n/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ \"./src/models/index.ts\");\n/* harmony import */ var _users_repository__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./users.repository */ \"./src/repositories/users.repository.ts\");\n\n\nconst userRepository = new _users_repository__WEBPACK_IMPORTED_MODULE_1__.UserRepository(_models__WEBPACK_IMPORTED_MODULE_0__.users);\n\n\n//# sourceURL=webpack://ovada_analytics/./src/repositories/index.ts?");

/***/ }),

/***/ "./src/repositories/users.repository.ts":
/*!**********************************************!*\
  !*** ./src/repositories/users.repository.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UserRepository: () => (/* binding */ UserRepository)\n/* harmony export */ });\n/* harmony import */ var _shared_base_repository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/base-repository */ \"./src/shared/base-repository.ts\");\n\nclass UserRepository extends _shared_base_repository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(_users) {\n        super(_users);\n        this._users = _users;\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/repositories/users.repository.ts?");

/***/ }),

/***/ "./src/routes/admin.routes.ts":
/*!************************************!*\
  !*** ./src/routes/admin.routes.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminRouter: () => (/* binding */ adminRouter)\n/* harmony export */ });\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! express */ \"express\");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(express__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _controllers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controllers */ \"./src/controllers/index.ts\");\n\n\nconst adminRouter = (0,express__WEBPACK_IMPORTED_MODULE_0__.Router)();\nadminRouter.post('/top-specialities', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_1__.adminController.getTopTenSpecialities(...args));\nadminRouter.post('/sum-amounts', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_1__.adminController.getSumOfAmounts(...args));\nadminRouter.post('/summary-charts', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_1__.adminController.getSummary(...args));\nadminRouter.post('/highest-payers', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_1__.adminController.getHigherPayerTypeStats(...args));\nadminRouter.post('/claims-overview', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_1__.adminController.getClaimsOverview(...args));\nadminRouter.post('/BilledPayment', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_1__.adminController.getbilledpayment(...args));\nadminRouter.post('/revenue-locations', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_1__.adminController.getRevenue(...args));\n/**\n * GET routes\n */ \n\n\n//# sourceURL=webpack://ovada_analytics/./src/routes/admin.routes.ts?");

/***/ }),

/***/ "./src/routes/filter.routes.ts":
/*!*************************************!*\
  !*** ./src/routes/filter.routes.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterRouter: () => (/* binding */ filterRouter)\n/* harmony export */ });\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! express */ \"express\");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(express__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _controllers_Reports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controllers/Reports */ \"./src/controllers/Reports/index.ts\");\n\n\nconst filterRouter = (0,express__WEBPACK_IMPORTED_MODULE_0__.Router)();\nfilterRouter.get('/filters', (...args) => _controllers_Reports__WEBPACK_IMPORTED_MODULE_1__.filtercontroller.getFilteredData(...args));\n\n\n//# sourceURL=webpack://ovada_analytics/./src/routes/filter.routes.ts?");

/***/ }),

/***/ "./src/routes/global-filters.routes.ts":
/*!*********************************************!*\
  !*** ./src/routes/global-filters.routes.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   globalFilterRouter: () => (/* binding */ globalFilterRouter)\n/* harmony export */ });\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! express */ \"express\");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(express__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _controllers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controllers */ \"./src/controllers/index.ts\");\n\n\nconst globalFilterRouter = (0,express__WEBPACK_IMPORTED_MODULE_0__.Router)();\n/**\n * GET routes\n */\nglobalFilterRouter.get('/', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_1__.globalFilterController.get(...args));\n/**\n * POST routes\n */\n/**\n * PUT routes\n */\n/**\n * DELETE routes\n */ \n\n\n//# sourceURL=webpack://ovada_analytics/./src/routes/global-filters.routes.ts?");

/***/ }),

/***/ "./src/routes/practice.manager.routes.ts":
/*!***********************************************!*\
  !*** ./src/routes/practice.manager.routes.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   practiceManagerRouter: () => (/* binding */ practiceManagerRouter)\n/* harmony export */ });\n/* harmony import */ var _controllers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../controllers */ \"./src/controllers/index.ts\");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! express */ \"express\");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(express__WEBPACK_IMPORTED_MODULE_1__);\n\n//import { prependOnceListener } from \"cluster\";\n\nconst practiceManagerRouter = (0,express__WEBPACK_IMPORTED_MODULE_1__.Router)();\n/**\n * GET routes\n */\npracticeManagerRouter.post('/summaryCharts', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_0__.practiceManagerController.getSummary(...args));\npracticeManagerRouter.post('/patientTrends', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_0__.practiceManagerController.getPatientTrends(...args));\npracticeManagerRouter.post('/appointment-trends', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_0__.practiceManagerController.getAppointmentTrends(...args));\npracticeManagerRouter.post('/gap-duration', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_0__.practiceManagerController.getGapDuration(...args));\npracticeManagerRouter.post('/visits', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_0__.practiceManagerController.getVisitStatus(...args));\npracticeManagerRouter.post('/bills', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_0__.practiceManagerController.getBillStatus(...args));\npracticeManagerRouter.post('/denial-type', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_0__.practiceManagerController.getDenialTypeStats(...args));\n\n\n//# sourceURL=webpack://ovada_analytics/./src/routes/practice.manager.routes.ts?");

/***/ }),

/***/ "./src/routes/provider.routes.ts":
/*!***************************************!*\
  !*** ./src/routes/provider.routes.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   providerRouter: () => (/* binding */ providerRouter)\n/* harmony export */ });\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! express */ \"express\");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(express__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _controllers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controllers */ \"./src/controllers/index.ts\");\n\n\nconst providerRouter = (0,express__WEBPACK_IMPORTED_MODULE_0__.Router)();\nproviderRouter.post('/appointments', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_1__.providerController.getAppointments(...args));\nproviderRouter.post('/appointments-analysis', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_1__.providerController.getAppointmentsAnalysis(...args));\nproviderRouter.post('/bills', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_1__.providerController.getBillStatus(...args));\nproviderRouter.post('/missing-visits', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_1__.providerController.getMissingVisitStatus(...args));\n/**\n * GET routes\n */\nproviderRouter.post('/summary-charts', (...args) => _controllers__WEBPACK_IMPORTED_MODULE_1__.providerController.getSummary(...args));\n\n\n//# sourceURL=webpack://ovada_analytics/./src/routes/provider.routes.ts?");

/***/ }),

/***/ "./src/routes/routes.ts":
/*!******************************!*\
  !*** ./src/routes/routes.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   routes: () => (/* binding */ routes)\n/* harmony export */ });\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! express */ \"express\");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(express__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_request_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/request-logger */ \"./src/utils/request-logger.ts\");\n/* harmony import */ var _admin_routes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./admin.routes */ \"./src/routes/admin.routes.ts\");\n/* harmony import */ var _global_filters_routes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./global-filters.routes */ \"./src/routes/global-filters.routes.ts\");\n/* harmony import */ var _visit_routes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./visit.routes */ \"./src/routes/visit.routes.ts\");\n/* harmony import */ var _practice_manager_routes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./practice.manager.routes */ \"./src/routes/practice.manager.routes.ts\");\n/* harmony import */ var _provider_routes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./provider.routes */ \"./src/routes/provider.routes.ts\");\n/* harmony import */ var _filter_routes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./filter.routes */ \"./src/routes/filter.routes.ts\");\n\n\n\n\n\n\n\n\nconst routes = (0,express__WEBPACK_IMPORTED_MODULE_0__.Router)();\nroutes.use('/provider', _provider_routes__WEBPACK_IMPORTED_MODULE_6__.providerRouter, _utils_request_logger__WEBPACK_IMPORTED_MODULE_1__.requestLoggerMiddleWare.logger);\nroutes.use('/admin', _admin_routes__WEBPACK_IMPORTED_MODULE_2__.adminRouter, _utils_request_logger__WEBPACK_IMPORTED_MODULE_1__.requestLoggerMiddleWare.logger);\nroutes.use('/practice-manager', _practice_manager_routes__WEBPACK_IMPORTED_MODULE_5__.practiceManagerRouter, _utils_request_logger__WEBPACK_IMPORTED_MODULE_1__.requestLoggerMiddleWare.logger);\nroutes.use('/global-filter-dropdowns', _global_filters_routes__WEBPACK_IMPORTED_MODULE_3__.globalFilterRouter, _utils_request_logger__WEBPACK_IMPORTED_MODULE_1__.requestLoggerMiddleWare.logger);\nroutes.use('/provider', _provider_routes__WEBPACK_IMPORTED_MODULE_6__.providerRouter, _utils_request_logger__WEBPACK_IMPORTED_MODULE_1__.requestLoggerMiddleWare.logger);\nroutes.use('/visit-report', _visit_routes__WEBPACK_IMPORTED_MODULE_4__.visitRouter, _utils_request_logger__WEBPACK_IMPORTED_MODULE_1__.requestLoggerMiddleWare.logger);\nroutes.use('/report-filter', _filter_routes__WEBPACK_IMPORTED_MODULE_7__.filterRouter, _utils_request_logger__WEBPACK_IMPORTED_MODULE_1__.requestLoggerMiddleWare.logger);\n\n\n//# sourceURL=webpack://ovada_analytics/./src/routes/routes.ts?");

/***/ }),

/***/ "./src/routes/visit.routes.ts":
/*!************************************!*\
  !*** ./src/routes/visit.routes.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   visitRouter: () => (/* binding */ visitRouter)\n/* harmony export */ });\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! express */ \"express\");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(express__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _controllers_Reports___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controllers/Reports/ */ \"./src/controllers/Reports/index.ts\");\n\n\nconst visitRouter = (0,express__WEBPACK_IMPORTED_MODULE_0__.Router)();\nvisitRouter.post('/getVisitDetailReport', (...args) => _controllers_Reports___WEBPACK_IMPORTED_MODULE_1__.visitController.getvisitReport(...args));\nvisitRouter.post('/SummaryReport', (...args) => _controllers_Reports___WEBPACK_IMPORTED_MODULE_1__.visitController.getSummaryReport(...args));\n\n\n//# sourceURL=webpack://ovada_analytics/./src/routes/visit.routes.ts?");

/***/ }),

/***/ "./src/services/Reports/filterService.ts":
/*!***********************************************!*\
  !*** ./src/services/Reports/filterService.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilterService: () => (/* binding */ FilterService)\n/* harmony export */ });\n/* harmony import */ var _config_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/database */ \"./src/config/database.ts\");\n/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared */ \"./src/shared/index.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nclass FilterService extends _shared__WEBPACK_IMPORTED_MODULE_1__.Helper {\n    constructor(http) {\n        super();\n        this.http = http;\n        this.getFilteredData = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const filterquery = `\r\n            SELECT\r\n    (\r\n        SELECT JSON_AGG(\r\n            JSON_BUILD_OBJECT(\r\n                'id', ctd.case_type_id::integer,\r\n                'name', ctd.name\r\n            )\r\n        ) AS case_types\r\n        FROM (\r\n            SELECT case_type_id, name\r\n            FROM case_types_dim\r\n            LIMIT 8\r\n        ) as ctd\r\n    ) AS case_types,\r\n    (\r\n        SELECT JSON_AGG(\r\n            JSON_BUILD_OBJECT(\r\n                'id', fl.facility_location_id::integer,\r\n                'name', fl.facility_location_name\r\n            )\r\n        ) AS practice_locations\r\n        FROM facility_location_dim as fl\r\n    ) AS practice_locations,\r\n    (\r\n        SELECT JSON_AGG(\r\n            JSON_BUILD_OBJECT(\r\n                'id', atd.appointment_type_id::integer,\r\n                'name', atd.qualifier\r\n            )\r\n        ) AS visit_types\r\n        FROM appointment_type_dim as atd\r\n    ) AS visit_types,\r\n    (\r\n        SELECT JSON_AGG(\r\n            JSON_BUILD_OBJECT(\r\n                'id', vssd.visit_session_state_id::integer,\r\n                'name', vssd.visit_session_state_name\r\n            )\r\n        ) AS statuses\r\n        FROM visit_session_state_dim as vssd\r\n    ) AS statuses,\r\n    (\r\n        SELECT JSON_AGG(\r\n            JSON_BUILD_OBJECT(\r\n                'id', phd.physician_id::integer,\r\n                'name', CONCAT(phd.first_name, ' ', phd.middle_name, ' ', phd.last_name)\r\n            )\r\n        ) AS providers\r\n        FROM physician_dim as phd\r\n    ) AS  providers ,\r\n    (\r\n        SELECT JSON_AGG(\r\n            JSON_BUILD_OBJECT(\r\n                'id', sd.speciality_id::integer,\r\n                'name', sd.name\r\n            )\r\n        ) AS specialities\r\n        FROM specialities_dim as sd\r\n    ) AS specialities;\r\n`;\n                // console.log(query1, 'filteredddddddd')\n                const results = yield _config_database__WEBPACK_IMPORTED_MODULE_0__.sequelize.query(filterquery);\n                console.log(results, 'resulllltttttedfilter');\n                return results[0];\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        this.__http = new http();\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/services/Reports/filterService.ts?");

/***/ }),

/***/ "./src/services/Reports/index.ts":
/*!***************************************!*\
  !*** ./src/services/Reports/index.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterservice: () => (/* binding */ filterservice),\n/* harmony export */   visitservice: () => (/* binding */ visitservice)\n/* harmony export */ });\n/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared */ \"./src/shared/index.ts\");\n/* harmony import */ var _visitService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visitService */ \"./src/services/Reports/visitService.ts\");\n/* harmony import */ var _filterService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filterService */ \"./src/services/Reports/filterService.ts\");\n\n\n\nconst visitservice = new _visitService__WEBPACK_IMPORTED_MODULE_1__.VisitReportService(_shared__WEBPACK_IMPORTED_MODULE_0__.Http);\nconst filterservice = new _filterService__WEBPACK_IMPORTED_MODULE_2__.FilterService(_shared__WEBPACK_IMPORTED_MODULE_0__.Http);\n\n\n//# sourceURL=webpack://ovada_analytics/./src/services/Reports/index.ts?");

/***/ }),

/***/ "./src/services/Reports/visitService.ts":
/*!**********************************************!*\
  !*** ./src/services/Reports/visitService.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VisitReportService: () => (/* binding */ VisitReportService)\n/* harmony export */ });\n/* harmony import */ var _config_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/database */ \"./src/config/database.ts\");\n/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared */ \"./src/shared/index.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nclass VisitReportService extends _shared__WEBPACK_IMPORTED_MODULE_1__.Helper {\n    constructor(http) {\n        super();\n        this.http = http;\n        this.getVisitReport = (reportFilters) => __awaiter(this, void 0, void 0, function* () {\n            //  let whereClause = ReportFilterQueryHelper(reportFilters);\n            try {\n                const { case_type_ids, practice_locations_ids, visit_type_ids, status_id, doctor_ids, fromDate, toDate, speciality_ids, } = reportFilters;\n                // Start with a default WHERE clause\n                let whereClause = `sd.speciality_id is NOT NULL`;\n                // If case_type_ids are provided, filter by them\n                if (case_type_ids && case_type_ids.length > 0) {\n                    // const quotedCaseTypeIds = case_type_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND vf.case_type_id IN (${case_type_ids})`;\n                }\n                // If practice_location_ids are provided, filter by them\n                if (practice_locations_ids && practice_locations_ids.length > 0) {\n                    const quotedLocationIds = practice_locations_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND fl.facility_location_id IN (${quotedLocationIds})`;\n                }\n                // If visit_type_ids are provided, filter by them\n                if (visit_type_ids && visit_type_ids.length > 0) {\n                    const quotedAppointmentTypeIds = visit_type_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND atd.appointment_type_id IN (${quotedAppointmentTypeIds})`;\n                }\n                // If visit_session_state_ids are provided, filter by them\n                if (status_id) {\n                    // const quotedSessionStateIds = status_id.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND vf.visit_session_state_id = (${status_id})`;\n                }\n                // If physician_ids are provided, filter by them\n                if (doctor_ids && doctor_ids.length > 0) {\n                    const quotedPhysicianIds = doctor_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND phd.physician_id IN (${quotedPhysicianIds})`;\n                }\n                // If speciality_ids are provided, filter by them\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND sd.speciality_id IN (${quotedSpecialityIds})`;\n                }\n                if (fromDate && toDate) {\n                    whereClause += ` AND vf.visit_date >= '${fromDate}' AND vf.visit_date <= '${toDate}'`;\n                }\n                // Construct the SQL query\n                const reportQuery = `\r\n            SELECT\r\n            vf.case_id AS CASE_ID,\r\n            vf.visit_date,\r\n            CONCAT(pd.first_name, ' ', pd.middle_name, ' ', pd.last_name) AS patient_name,\r\n            ctd.name AS case_Type,\r\n            sd.name AS speciality,\r\n            cf.date_of_admission AS DOA,\r\n            fl.facility_location_name AS practice_location,\r\n            CONCAT(PHD.first_name, ' ', PHD.middle_name, ' ', PHD.last_name) AS provider_name,\r\n            Atd.qualifier AS Visit_Type,\r\n            vssd.visit_session_state_name AS status,\r\n            current_date - vf.visit_date AS No_of_days,\r\n            vf.document_uploaded AS Report_Uploaded_Status,\r\n            vf.visit_cpt_code_status AS CPT_Code_Status,\r\n            vf.visit_icd_code_status AS ICD_Code_status\r\n        FROM\r\n            visits_fact as vf\r\n            LEFT JOIN patient_dim pd ON vf.patient_id = pd.patient_id\r\n            LEFT JOIN case_types_dim ctd ON vf.case_type_id = ctd.case_type_id\r\n            LEFT JOIN specialities_dim sd ON vf.speciality_id = sd.speciality_id\r\n            LEFT JOIN facility_location_dim fl ON vf.facility_location_id = fl.facility_location_id\r\n            LEFT JOIN physician_dim PHD ON vf.provider_id = PHD.physician_id\r\n            LEFT JOIN case_fact_new cf ON vf.case_id = cf.case_id\r\n            LEFT JOIN appointment_fact af ON vf.appointment_id = af.appointment_id\r\n            LEFT JOIN appointment_type_dim Atd ON af.appointment_type_id = Atd.appointment_type_id\r\n            LEFT JOIN visit_session_state_dim vssd ON vf.visit_session_state_id = vssd.visit_session_state_id\r\n        WHERE\r\n            ${whereClause}\r\n        LIMIT 10\r\n      `;\n                console.log(reportQuery, 'queeerrry');\n                // Execute the SQL query and get the results\n                const results = yield _config_database__WEBPACK_IMPORTED_MODULE_0__.sequelize.query(reportQuery);\n                console.log(results, 'repooorrtttt');\n                // Return the results\n                return results[0];\n            }\n            catch (error) {\n                // Handle any errors and log them\n                throw error;\n            }\n        });\n        this.getSummaryReport = (reportFilters) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { case_type_ids, practice_location_ids, visit_session_state_ids, physician_ids, speciality_ids, groupby, fromDate, toDate } = reportFilters;\n                // Start with a default WHERE clause\n                let whereClause = 'af.deleted_at IS NULL';\n                let groupbyCaluse = `GROUP BY Speciality, VisitStatus, Provider\r\n            ORDER BY Speciality, VisitStatus, Provider`;\n                // If case_type_ids are provided, filter by them\n                if (case_type_ids && case_type_ids.length > 0) {\n                    const quotedCaseTypeIds = case_type_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND af.case_type_id IN (${quotedCaseTypeIds})`;\n                }\n                // If practice_location_ids are provided, filter by them\n                if (practice_location_ids && practice_location_ids.length > 0) {\n                    const quotedLocationIds = practice_location_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND af.facility_location_id IN (${quotedLocationIds})`;\n                }\n                // If visit_session_state_ids are provided, filter by them\n                if (visit_session_state_ids && visit_session_state_ids.length > 0) {\n                    const quotedSessionStateIds = visit_session_state_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND vf.visit_session_state_id IN (${quotedSessionStateIds})`;\n                }\n                // If physician_ids are provided, filter by them\n                if (physician_ids && physician_ids.length > 0) {\n                    const quotedPhysicianIds = physician_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND af.physician_id IN (${quotedPhysicianIds})`;\n                }\n                // If speciality_ids are provided, filter by them\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND af.speciality_id IN (${quotedSpecialityIds})`;\n                }\n                if (groupby) {\n                    if (groupby == 1) {\n                        groupbyCaluse = `GROUP BY Speciality, VisitStatus, Provider\r\n                ORDER BY Speciality, VisitStatus, Provider`;\n                    }\n                    else if (groupby == 2) {\n                        groupbyCaluse = `GROUP BY Provider,Speciality, VisitStatus\r\n                ORDER BY Provider,Speciality, VisitStatus`;\n                    }\n                    else if (groupby == 3) {\n                        groupbyCaluse = `GROUP BY VisitStatus,Provider,Speciality\r\n                ORDER BY VisitStatus,Provider,Speciality`;\n                    }\n                }\n                if (fromDate && toDate) {\n                    whereClause += ` AND af.scheduled_date_time >= '${fromDate}' AND af.scheduled_date_time <= '${toDate}'`;\n                }\n                // Extracting filters from the request body\n                // Construct the SQL query\n                const sqlQuery = `\r\n            WITH summary AS (\r\n                SELECT \r\n                    sd.qualifier AS Speciality,\r\n                    pd.first_name || ' ' || pd.last_name AS Provider,\r\n                    CASE\r\n                        WHEN vf.visit_session_state_id = 1 THEN 'Unfinalized'\r\n                        WHEN vf.visit_session_state_id = 2 THEN 'Finalized'\r\n                        WHEN vf.visit_session_state_id = 3 THEN 'BillCreated'\r\n                    END AS VisitStatus,\r\n                    atd.qualifier AS VisitType\r\n                FROM appointment_fact af\r\n                JOIN specialities_dim sd ON sd.speciality_id = af.speciality_id\r\n                JOIN physician_dim pd ON pd.physician_id = af.physician_id\r\n                JOIN appointment_type_dim atd ON atd.appointment_type_id = af.appointment_type_id\r\n                JOIN visits_fact vf ON vf.case_id = af.case_id\r\n                WHERE ${whereClause}\r\n            )\r\n            \r\n            SELECT \r\n                Speciality,\r\n                Provider,\r\n                VisitStatus,\r\n                COUNT(CASE WHEN VisitType = 'IE' THEN 1 END) AS Initial_Evaluation,\r\n                COUNT(CASE WHEN VisitType = 'FU' THEN 1 END) AS Follow_Up,\r\n                COUNT(CASE WHEN VisitType = 'RE' THEN 1 END) AS Re_Evaluation,\r\n                (COUNT(CASE WHEN VisitType = 'IE' THEN 1 END) +\r\n                 COUNT(CASE WHEN VisitType = 'FU' THEN 1 END) +\r\n                 COUNT(CASE WHEN VisitType = 'RE' THEN 1 END)) AS Total_Visits\r\n            FROM summary\r\n            ${groupbyCaluse}\r\n            \r\n            \r\n                `;\n                console.log(sqlQuery);\n                const [results] = yield _config_database__WEBPACK_IMPORTED_MODULE_0__.sequelize.query(sqlQuery);\n                return results;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        this.__http = new http();\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/services/Reports/visitService.ts?");

/***/ }),

/***/ "./src/services/admin.service.ts":
/*!***************************************!*\
  !*** ./src/services/admin.service.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdminService: () => (/* binding */ AdminService)\n/* harmony export */ });\n/* harmony import */ var sequelize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sequelize */ \"sequelize\");\n/* harmony import */ var sequelize__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sequelize__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _config_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/database */ \"./src/config/database.ts\");\n/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared */ \"./src/shared/index.ts\");\n/* harmony import */ var _shared_global_filter_query_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/global.filter.query.helper */ \"./src/shared/global.filter.query.helper.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\nclass AdminService extends _shared__WEBPACK_IMPORTED_MODULE_2__.Helper {\n    constructor(http) {\n        super();\n        this.http = http;\n        this.getTopTenBilledSpecialities = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                let whereClause = (0,_shared_global_filter_query_helper__WEBPACK_IMPORTED_MODULE_3__.GlobalFilterQueryHelper)(reqData);\n                // Construct the SQL query\n                let sqlQuery = `WITH SpecialityTotals AS ( SELECT s.name AS speciality_name, SUM(bf.bill_amount) AS bill_amount, ROW_NUMBER() OVER (ORDER BY SUM(bf.bill_amount) DESC) AS row_num FROM specialities_dim s INNER JOIN bills_fact_new bf ON bf.speciality_id = s.speciality_id where ${whereClause} GROUP BY speciality_name ORDER BY bill_amount DESC LIMIT 10 ), ProvidersTotals AS ( SELECT CONCAT(p.first_name,' ',p.last_name)  AS provider_name, SUM(bf.bill_amount) AS provider_bill_amount, ROW_NUMBER() OVER (ORDER BY SUM(bf.bill_amount) DESC) AS row_num FROM physician_dim p INNER JOIN bills_fact_new bf ON bf.doctor_id = p.physician_id where ${whereClause} GROUP BY provider_name ORDER BY provider_bill_amount DESC LIMIT 10 ) SELECT ST.speciality_name, ST.bill_amount, PT.provider_name, PT.provider_bill_amount FROM SpecialityTotals ST FULL JOIN ProvidersTotals PT ON ST.row_num = PT.row_num`;\n                // Execute the SQL query and get the results\n                const results = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(sqlQuery);\n                // Return the results\n                return results[0];\n            }\n            catch (error) {\n                // Handle any errors and log them\n                throw error;\n            }\n        });\n        // #region Summary Chart for admin\n        this.getSummaryChart = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Destructure request data\n                const { time_span_id, month_id, facility_location_ids, speciality_ids, provider_ids, case_type_ids, fromDate, toDate } = reqData;\n                // Initialize variables\n                let newFromDate;\n                let newToDate;\n                let prevTime;\n                let time;\n                let whereClause = '';\n                let billCurTime;\n                let billPreTime;\n                let daysDifference;\n                // Check if time_span_id exists\n                if (time_span_id) {\n                    switch (time_span_id) {\n                        case 1:\n                            // Set time values for 1 week\n                            time = '1 week';\n                            prevTime = '2 week';\n                            break;\n                        case 2:\n                            // Set time values for 1 month\n                            time = '1 month';\n                            prevTime = '2 month';\n                            break;\n                        case 3:\n                            // Set time values for 6 months\n                            time = '6 month';\n                            prevTime = '12 month';\n                            break;\n                        case 4:\n                            // Set time values for 1 year\n                            time = '1 year';\n                            prevTime = '2 year';\n                            break;\n                        case 5:\n                            // Set time values based on current date for 5 days\n                            const currentDate = new Date();\n                            let totalCurrentDate = currentDate.getDate();\n                            time = totalCurrentDate + ' days';\n                            prevTime = (2 * totalCurrentDate) + ' days';\n                            break;\n                        default:\n                            time = '1 week';\n                            prevTime = '2 week';\n                            break;\n                    }\n                    // Construct time intervals for SQL queries\n                    billCurTime = `bill_date >=  (current_date - INTERVAL '${time}')  AND bill_date < current_date `;\n                    billPreTime = `bill_date >= (current_date - INTERVAL '${prevTime}') AND bill_date < (current_date - INTERVAL '${time}')`;\n                }\n                // Check if facility_location_ids exist\n                if (facility_location_ids && facility_location_ids.length > 0) {\n                    // Create quoted facility_location_ids for SQL query\n                    const quotedFacilityLocationIds = facility_location_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND facility_location_id IN (${quotedFacilityLocationIds}) `;\n                }\n                // Check if speciality_ids exist\n                if (speciality_ids && speciality_ids.length > 0) {\n                    // Create quoted speciality_ids for SQL query\n                    const quotedSpecialityIds = speciality_ids.map(id => `${id}`).join(', ');\n                    whereClause += ` AND speciality_id IN (${quotedSpecialityIds})`;\n                }\n                // Check if provider_ids exist\n                if (provider_ids && provider_ids.length > 0) {\n                    // Create quoted provider_ids for SQL query\n                    const quotedProviderIds = provider_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND doctor_id IN (${quotedProviderIds})`;\n                }\n                // Check if case_type_ids exist\n                if (case_type_ids && case_type_ids.length > 0) {\n                    // Create quoted case_type_ids for SQL query\n                    const quotedCaseTypeIds = case_type_ids.map(id => `${id}`).join(', ');\n                    whereClause += ` AND case_type_id IN (${quotedCaseTypeIds}) `;\n                }\n                // Check if fromdate, todate are provided and not empty\n                if (fromDate && toDate) {\n                    // Convert provided dates to Date objects\n                    const fromdateObj = new Date(fromDate);\n                    const todateObj = new Date(fromDate);\n                    // Calculate the difference in milliseconds between todate and fromdate\n                    const dateDifferenceMilliseconds = todateObj.getTime() - fromdateObj.getTime();\n                    // Convert milliseconds to days\n                    daysDifference = (dateDifferenceMilliseconds / (1000 * 60 * 60 * 24)) + ' days';\n                    // Construct time intervals for SQL queries based on provided dates\n                    billCurTime = `bill_date >= '${fromDate}'::DATE  AND bill_date < '${toDate}'::DATE `;\n                    billPreTime = `bill_date >= ('${fromDate}'::DATE - INTERVAL '${daysDifference}') AND bill_date <= '${fromDate}'::DATE`;\n                }\n                // Check if month_id is provided and not 0\n                if (month_id && month_id != 0) {\n                    let dayInMonth;\n                    // Get current date information\n                    const currentDate = new Date();\n                    const currentYear = currentDate.getFullYear();\n                    // Calculate the total days and start/end dates for the specified month\n                    dayInMonth = this.daysInMonth(currentYear, month_id);\n                    newFromDate = this.formatDateToYYYYMMDD(dayInMonth.startDate);\n                    newToDate = this.formatDateToYYYYMMDD(dayInMonth.endDate);\n                    daysDifference = dayInMonth.totalDays + ' days';\n                    // Construct time intervals for SQL queries based on the specified month\n                    billCurTime = `bill_date >= '${newFromDate}'::DATE  AND bill_date < '${newToDate}'::DATE `;\n                    billPreTime = `bill_date >= ('${newFromDate}'::DATE - INTERVAL '${daysDifference}') AND bill_date <= '${newFromDate}'::DATE`;\n                }\n                // Construct the main SQL query\n                const query = `\r\n        WITH interest_amount AS (\r\n          SELECT\r\n            (SELECT SUM(interest_amount) FROM bills_fact_new WHERE interest_amount IS NOT NULL AND ${billCurTime} ${whereClause}) AS current_interest,\r\n            (SELECT SUM(interest_amount) FROM bills_fact_new WHERE interest_amount IS NOT NULL AND ${billPreTime} ${whereClause}) AS previous_interest\r\n        ),\r\n        total_billed_amount AS (\r\n          SELECT\r\n            (SELECT SUM(bill_amount) FROM bills_fact_new WHERE bill_amount IS NOT NULL AND ${billCurTime} ${whereClause}) AS current_billed,\r\n            (SELECT SUM(bill_amount) FROM bills_fact_new WHERE bill_amount IS NOT NULL AND ${billPreTime} ${whereClause}) AS previous_billed\r\n        ),\r\n        total_payments_received AS (\r\n          SELECT\r\n            (SELECT SUM(paid_amount + over_payment) FROM bills_fact_new WHERE paid_amount IS NOT NULL AND ${billCurTime} ${whereClause}) AS total_payment_received,\r\n            (SELECT SUM(paid_amount + over_payment) FROM bills_fact_new WHERE paid_amount IS NOT NULL AND ${billPreTime} ${whereClause}) AS previous_payment_received\r\n        ),\r\n        total_account_receivables AS (\r\n          SELECT\r\n            (SELECT SUM(outstanding_amount) FROM bills_fact_new WHERE ${billCurTime} ${whereClause}) AS current_account_receivable,\r\n            (SELECT SUM(outstanding_amount) FROM bills_fact_new WHERE ${billPreTime} ${whereClause}) AS previous_account_receivable\r\n        ),\r\n        write_off_amount AS (\r\n          SELECT\r\n            (SELECT SUM(write_off_amount) FROM bills_fact_new WHERE write_off_amount IS NOT NULL AND ${billCurTime} ${whereClause}) AS current_writeoff,\r\n            (SELECT SUM(write_off_amount) FROM bills_fact_new WHERE write_off_amount IS NOT NULL AND ${billPreTime} ${whereClause}) AS previous_writeoff\r\n        )\r\n        SELECT\r\n          current_interest, previous_interest,\r\n          current_billed, previous_billed,\r\n          total_payment_received, previous_payment_received,\r\n          current_account_receivable,previous_account_receivable,\r\n          current_writeoff,previous_writeoff\r\n        FROM interest_amount, total_billed_amount, total_payments_received, total_account_receivables, write_off_amount;\r\n      `;\n                // Execute the SQL query and retrieve data\n                const info = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(query, { type: sequelize__WEBPACK_IMPORTED_MODULE_0__.QueryTypes.SELECT });\n                // Assuming you have retrieved the data into the queryData object\n                const data = info[0];\n                // Transform data into a flat structure\n                const flatData = {\n                    current_interest: parseFloat(data.current_interest),\n                    previous_interest: parseFloat(data.previous_interest),\n                    current_billed: parseFloat(data.current_billed),\n                    previous_billed: parseFloat(data.previous_billed),\n                    total_payment_received: parseFloat(data.total_payment_received),\n                    previous_payment_received: parseFloat(data.previous_payment_received),\n                    current_account_receivable: parseFloat(data.current_account_receivable),\n                    previous_account_receivable: parseFloat(data.previous_account_receivable),\n                    current_writeoff: parseFloat(data.current_writeoff),\n                    previous_writeoff: parseFloat(data.previous_writeoff),\n                    interest_difference: 0,\n                    billed_difference: 0,\n                    payment_received_difference: 0,\n                    account_receivable_difference: 0,\n                    writeoff_difference: 0,\n                    isInterestPositive: false,\n                    isBilledPositive: false,\n                    isPaymentPositive: false,\n                    isReceivablesPositive: false,\n                    isWriteoffPositive: false,\n                };\n                // Calculate percentage difference and update the flatData object\n                flatData.interest_difference = ((flatData.current_interest - flatData.previous_interest) / flatData.previous_interest) * 100;\n                flatData.billed_difference = ((flatData.current_billed - flatData.previous_billed) / flatData.previous_billed) * 100;\n                flatData.payment_received_difference = ((flatData.total_payment_received - flatData.previous_payment_received) / flatData.previous_payment_received) * 100;\n                flatData.account_receivable_difference = ((flatData.current_account_receivable - flatData.previous_account_receivable) / flatData.previous_account_receivable) * 100;\n                flatData.writeoff_difference = ((flatData.current_writeoff - flatData.previous_writeoff) / flatData.previous_writeoff) * 100;\n                flatData.isInterestPositive = flatData.interest_difference >= 0;\n                flatData.isBilledPositive = flatData.billed_difference >= 0;\n                flatData.isPaymentPositive = flatData.payment_received_difference >= 0;\n                flatData.isReceivablesPositive = flatData.account_receivable_difference >= 0;\n                flatData.isWriteoffPositive = flatData.writeoff_difference >= 0;\n                // Create a response object with absolute values\n                const responseObject = {\n                    current_interest: Math.abs(flatData.current_interest) || 0,\n                    previous_interest: Math.abs(flatData.previous_interest) || 0,\n                    current_billed: Math.abs(flatData.current_billed) || 0,\n                    previous_billed: Math.abs(flatData.previous_billed) || 0,\n                    total_payment_received: Math.abs(flatData.total_payment_received) || 0,\n                    previous_payment_received: Math.abs(flatData.previous_payment_received) || 0,\n                    current_account_receivable: Math.abs(flatData.current_account_receivable) || 0,\n                    previous_account_receivable: Math.abs(flatData.previous_account_receivable) || 0,\n                    current_writeoff: Math.abs(flatData.current_writeoff) || 0,\n                    previous_writeoff: Math.abs(flatData.previous_writeoff) || 0,\n                    interest_difference: Math.abs(flatData.interest_difference) || 0,\n                    billed_difference: Math.abs(flatData.billed_difference) || 0,\n                    payment_received_difference: Math.abs(flatData.payment_received_difference) || 0,\n                    account_receivable_difference: Math.abs(flatData.account_receivable_difference) || 0,\n                    writeoff_difference: Math.abs(flatData.writeoff_difference) || 0,\n                    isInterestPositive: flatData.isInterestPositive,\n                    isBilledPositive: flatData.isBilledPositive,\n                    isPaymentPositive: flatData.isPaymentPositive,\n                    isReceivablesPositive: flatData.isReceivablesPositive,\n                    isWriteoffPositive: flatData.isWriteoffPositive,\n                };\n                // Format the response object and return\n                const result = {};\n                for (const key in responseObject) {\n                    if (typeof responseObject[key] === 'number') {\n                        result[key] = responseObject[key].toFixed(2);\n                    }\n                    else {\n                        result[key] = responseObject[key];\n                    }\n                }\n                return result;\n            }\n            catch (error) {\n                // Handle errors and return a message\n                throw error;\n            }\n        });\n        // #region revenue by location\n        this.getRevenueLocation = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Destructure request data\n                const { time_span_id, month_id, facility_location_ids, speciality_ids, provider_ids, case_type_ids, fromDate, toDate } = reqData;\n                // Initialize variables\n                let newFromDate;\n                let newToDate;\n                let prevTime;\n                let time;\n                let whereClause = '';\n                let billCurTime;\n                let billPreTime;\n                let daysDifference;\n                // Check if time_span_id exists\n                if (time_span_id) {\n                    switch (time_span_id) {\n                        case 1:\n                            // Set time values for 1 week\n                            time = '1 week';\n                            prevTime = '2 week';\n                            break;\n                        case 2:\n                            // Set time values for 1 month\n                            time = '1 month';\n                            prevTime = '2 month';\n                            break;\n                        case 3:\n                            // Set time values for 6 months\n                            time = '6 month';\n                            prevTime = '12 month';\n                            break;\n                        case 4:\n                            // Set time values for 1 year\n                            time = '1 year';\n                            prevTime = '2 year';\n                            break;\n                        case 5:\n                            // Set time values based on current date for 5 days\n                            const currentDate = new Date();\n                            let totalCurrentDate = currentDate.getDate();\n                            time = totalCurrentDate + ' days';\n                            prevTime = (2 * totalCurrentDate) + ' days';\n                            break;\n                        default:\n                            time = '1 week';\n                            prevTime = '2 week';\n                            break;\n                    }\n                    // Construct time intervals for SQL queries\n                    billCurTime = `btf.bill_date >=  (current_date - INTERVAL '${time}')  AND btf.bill_date < current_date `;\n                    billPreTime = `btf.bill_date >= (current_date - INTERVAL '${prevTime}') AND btf.bill_date < (current_date - INTERVAL '${time}')`;\n                }\n                // Check if facility_location_ids exist\n                if (facility_location_ids && facility_location_ids.length > 0) {\n                    // Create quoted facility_location_ids for SQL query\n                    const quotedFacilityLocationIds = facility_location_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND btf.facility_location_id IN (${quotedFacilityLocationIds}) `;\n                }\n                // Check if speciality_ids exist\n                if (speciality_ids && speciality_ids.length > 0) {\n                    // Create quoted speciality_ids for SQL query\n                    const quotedSpecialityIds = speciality_ids.map(id => `${id}`).join(', ');\n                    whereClause += ` AND btf.speciality_id IN (${quotedSpecialityIds})`;\n                }\n                // Check if provider_ids exist\n                if (provider_ids && provider_ids.length > 0) {\n                    // Create quoted provider_ids for SQL query\n                    const quotedProviderIds = provider_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND btf.doctor_id IN (${quotedProviderIds})`;\n                }\n                // Check if case_type_ids exist\n                if (case_type_ids && case_type_ids.length > 0) {\n                    // Create quoted case_type_ids for SQL query\n                    const quotedCaseTypeIds = case_type_ids.map(id => `${id}`).join(', ');\n                    whereClause += ` AND btf.case_type_id IN (${quotedCaseTypeIds}) `;\n                }\n                // Check if fromdate, todate are provided and not empty\n                if (fromDate && toDate) {\n                    // Convert provided dates to Date objects\n                    const fromdateObj = new Date(fromDate);\n                    const todateObj = new Date(toDate);\n                    // Calculate the difference in milliseconds between todate and fromdate\n                    const dateDifferenceMilliseconds = todateObj.getTime() - fromdateObj.getTime();\n                    // Convert milliseconds to days\n                    daysDifference = (dateDifferenceMilliseconds / (1000 * 60 * 60 * 24)) + ' days';\n                    // Construct time intervals for SQL queries based on provided dates\n                    billCurTime = `btf.bill_date >= '${fromDate}'::DATE  AND btf.bill_date < '${toDate}'::DATE `;\n                    billPreTime = `btf.bill_date >= ('${fromDate}'::DATE - INTERVAL '${daysDifference}') AND btf.bill_date <= '${fromDate}'::DATE`;\n                }\n                // Check if month_id is provided and not 0\n                if (month_id && month_id != 0) {\n                    let dayInMonth;\n                    // Get current date information\n                    const currentDate = new Date();\n                    const currentYear = currentDate.getFullYear();\n                    // Calculate the total days and start/end dates for the specified month\n                    dayInMonth = this.daysInMonth(currentYear, month_id);\n                    newFromDate = this.formatDateToYYYYMMDD(dayInMonth.startDate);\n                    newToDate = this.formatDateToYYYYMMDD(dayInMonth.endDate);\n                    daysDifference = dayInMonth.totalDays + ' days';\n                    billCurTime = `btf.bill_date >= '${newFromDate}'::DATE  AND btf.bill_date < '${newToDate}'::DATE `;\n                    billPreTime = `btf.bill_date >= ('${newFromDate}'::DATE - INTERVAL '${daysDifference}') AND btf.bill_date <= '${newFromDate}'::DATE`;\n                }\n                // Construct the main SQL query\n                const query = `\r\n          SELECT\r\n            btf.facility_location_id,\r\n            SUM(btf.paid_amount + btf.over_payment) AS revenue,\r\n            fit.facility_location_name,\r\n            fit.facility_location_qualifier,\r\n            fit.facility_location_name,\r\n            it.facility_qualifier\r\n          FROM bills_fact_new btf\r\n          LEFT JOIN facility_location_dim fit ON btf.facility_location_id = fit.facility_location_id\r\n          LEFT JOIN facilities_dim it ON fit.facility_id = it.facility_id\r\n          WHERE ${billCurTime} ${whereClause}\r\n          GROUP BY it.facility_qualifier, btf.facility_location_id, fit.facility_location_name, fit.facility_location_qualifier, fit.facility_location_name\r\n          ORDER BY revenue DESC;\r\n      `;\n                // Execute the SQL query and retrieve data\n                const info = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(query, { type: sequelize__WEBPACK_IMPORTED_MODULE_0__.QueryTypes.SELECT });\n                return info;\n            }\n            catch (error) {\n                // Handle errors and return an error message\n                throw error;\n            }\n        });\n        // #region Sum of Amounts by Case Type\n        this.getSumOfAmounts = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Destructure the input data\n                const { time_span_id, month_id, speciality_ids, case_type_ids, provider_ids, facility_location_ids, fromDate, toDate, recipient_id } = reqData;\n                // Start with a default WHERE clause\n                let whereClause = `bf.deleted_at IS NULL `;\n                // If speciality_ids are provided, filter by them\n                // brd.bill_recipient_type_id = 1\n                if (recipient_id) {\n                    whereClause += ` AND brd.bill_recipient_type_id::integer = ${recipient_id}`;\n                }\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND bf.speciality_id IN (${quotedSpecialityIds})`;\n                }\n                // If month_id is provided, filter by the specified month\n                // if (month_id) {\n                //   const year: number = (new Date).getFullYear();\n                //   const create_startDate: Date = new Date(year, month_id - 1, 1);\n                //   const create_endDate: Date = new Date(year, month_id - 1, 1);\n                //   create_endDate.setMonth(create_startDate.getMonth() + 1);\n                //   create_endDate.setDate(create_endDate.getDate() - 1);\n                //   const startDate: string = create_startDate.toISOString().split('T')[0];\n                //   const endDate: string = create_endDate.toISOString().split('T')[0];\n                //   whereClause += ` AND bf.bill_date >= '${startDate}'::DATE AND bf.bill_date <= '${endDate}'::DATE `;\n                // }\n                // If provider_ids are provided, filter by them\n                if (provider_ids && provider_ids.length > 0) {\n                    const quotedProviderIds = provider_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND bf.doctor_id IN (${quotedProviderIds})`;\n                }\n                // If facility_location_ids are provided, filter by them\n                if (facility_location_ids && facility_location_ids.length > 0) {\n                    const quotedLocationIds = facility_location_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND bf.facility_location_id IN (${quotedLocationIds})`;\n                }\n                if (case_type_ids && case_type_ids.length > 0) {\n                    // Create quoted case_type_ids for SQL query\n                    const quotedCaseTypeIds = case_type_ids.map(id => `${id}`).join(', ');\n                    whereClause += ` AND bf.case_type_id IN (${quotedCaseTypeIds}) `;\n                }\n                // If fromDate and toDate are provided, filter by date range\n                // if (fromDate && toDate) {\n                //   whereClause += ` AND bill_date >= '${fromDate}' AND bill_date <= '${toDate}' `;\n                // }\n                // If time_span_id is provided, filter by the specified time span\n                // if (time_span_id) {\n                //   let interval: string = '';\n                //   switch (time_span_id) {\n                //     case 1:\n                //       interval = '1 week';\n                //       break;\n                //     case 2:\n                //       interval = '1 month';\n                //       break;\n                //     case 3:\n                //       interval = '6 months';\n                //       break;\n                //     case 4:\n                //       interval = '1 year';\n                //       break;\n                //     case 5:\n                //       const currentDate: Date = new Date();\n                //       const firstDayOfMonth: Date = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n                //       const daysDifference: number = Math.floor((currentDate.getTime() - firstDayOfMonth.getTime()) / (1000 * 60 * 60 * 24));\n                //       interval = `${daysDifference} days`;\n                //       break;\n                //     default:\n                //       interval = '1 week';\n                //   }\n                //   // Filter by the calculated interval\n                //   whereClause += ` AND bill_date >= current_date - interval '${interval}' AND bill_date < current_date`;\n                // }\n                // Construct the SQL query\n                const sqlQuery = `\r\n      SELECT\r\n          SUM(bf.outstanding_amount) AS Total_Outstanding_Amount,\r\n\t\t  current_date - bf.bill_date AS date_difference\r\n        FROM\r\n          bills_fact_new bf\r\n        LEFT JOIN case_types_dim ctd ON ctd.case_type_id = bf.case_type_id\r\n        JOIN bills_recipient_dim brd ON brd.bill_id = bf.bill_id\r\n        WHERE\r\n          ${whereClause} \r\n\t\t    GROUP BY\r\n           date_difference\r\n        ORDER BY\r\n           date_difference;\r\n              `;\n                // Execute the SQL query and get the results\n                const results = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(sqlQuery);\n                const obj = { \"0-30\": 0, \"31-60\": 0, \"61-90\": 0, \"91-120\": 0, \"121-150\": 0, \"151-180\": 0, \"181-210\": 0, \"211-240\": 0, \"241-270\": 0, \"270+\": 0 };\n                results[0].forEach((item) => {\n                    if (item.date_difference >= 0 && item.date_difference <= 30) {\n                        obj['0-30'] += Number(item.total_outstanding_amount);\n                    }\n                    else if (item.date_difference >= 31 && item.date_difference <= 60) {\n                        obj['31-60'] += Number(item.total_outstanding_amount);\n                    }\n                    else if (item.date_difference >= 61 && item.date_difference <= 90) {\n                        obj['61-90'] += Number(item.total_outstanding_amount);\n                    }\n                    else if (item.date_difference >= 91 && item.date_difference <= 120) {\n                        obj['91-120'] += Number(item.total_outstanding_amount);\n                    }\n                    else if (item.date_difference >= 121 && item.date_difference <= 150) {\n                        obj['121-150'] += Number(item.total_outstanding_amount);\n                    }\n                    else if (item.date_difference >= 151 && item.date_difference <= 180) {\n                        obj['151-180'] += Number(item.total_outstanding_amount);\n                    }\n                    else if (item.date_difference >= 181 && item.date_difference <= 210) {\n                        obj['181-210'] += Number(item.total_outstanding_amount);\n                    }\n                    else if (item.date_difference >= 211 && item.date_difference <= 240) {\n                        obj['211-240'] += Number(item.total_outstanding_amount);\n                    }\n                    else if (item.date_difference >= 241 && item.date_difference <= 270) {\n                        obj['241-270'] += Number(item.total_outstanding_amount);\n                    }\n                    else if (item.date_difference >= 271 && item.date_difference <= 360) {\n                        obj['270+'] += Number(item.total_outstanding_amount);\n                    }\n                    // else if (item.date_difference >= 300 && item.date_difference <= 360) {\n                    //   obj['300+'] += Number(item.total_outstanding_amount)\n                    // }\n                });\n                // Return the results\n                return obj;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        // #End region\n        // #region Claims overview\n        this.getClaimsOverview = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Destructure the input data\n                const { time_span_id, month_id, speciality_ids, provider_ids, facility_location_ids, case_type_ids, fromDate, toDate } = reqData;\n                // Start with a default WHERE clause\n                let whereClause = `bf.deleted_at IS NULL`;\n                // If speciality_ids are provided, filter by them\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND bf.speciality_id IN (${quotedSpecialityIds})`;\n                }\n                // If month_id is provided, filter by the specified month\n                if (month_id) {\n                    const year = (new Date).getFullYear();\n                    const create_startDate = new Date(year, month_id - 1, 1);\n                    const create_endDate = new Date(year, month_id - 1, 1);\n                    create_endDate.setMonth(create_startDate.getMonth() + 1);\n                    create_endDate.setDate(create_endDate.getDate() - 1);\n                    const startDate = create_startDate.toISOString().split('T')[0];\n                    const endDate = create_endDate.toISOString().split('T')[0];\n                    whereClause += ` AND bf.bill_date >= '${startDate}'::DATE AND bf.bill_date <= '${endDate}'::DATE `;\n                }\n                // If provider_ids are provided, filter by them\n                if (provider_ids && provider_ids.length > 0) {\n                    const quotedProviderIds = provider_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND bf.doctor_id IN (${quotedProviderIds})`;\n                }\n                // If facility_location_ids are provided, filter by them\n                if (facility_location_ids && facility_location_ids.length > 0) {\n                    const quotedLocationIds = facility_location_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND bf.facility_location_id IN (${quotedLocationIds})`;\n                }\n                // If fromDate and toDate are provided, filter by date range\n                if (fromDate && toDate) {\n                    whereClause += ` AND bill_date >= '${fromDate}' AND bill_date <= '${toDate}' `;\n                }\n                // If time_span_id is provided, filter by the specified time span\n                if (time_span_id) {\n                    let interval = '';\n                    switch (time_span_id) {\n                        case 1:\n                            interval = '1 week';\n                            break;\n                        case 2:\n                            interval = '1 month';\n                            break;\n                        case 3:\n                            interval = '6 months';\n                            break;\n                        case 4:\n                            interval = '1 year';\n                            break;\n                        case 5:\n                            const currentDate = new Date();\n                            const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n                            const daysDifference = Math.floor((currentDate.getTime() - firstDayOfMonth.getTime()) / (1000 * 60 * 60 * 24));\n                            interval = `${daysDifference} days`;\n                            break;\n                        default:\n                            interval = '1 week';\n                    }\n                    // Filter by the calculated interval\n                    whereClause += ` AND bill_date >= current_date - interval '${interval}' AND bill_date < current_date`;\n                }\n                // Construct the SQL query\n                const sqlQuery = `\r\n      WITH Claims AS (\r\n        SELECT \r\n         SUM(CASE WHEN pom_generate_count > 0 AND pom_received_count = 0 AND verification_sent_count = 0 AND verification_received_count = 0 AND denial_status_id IS NULL AND payment_status_id IS NULL THEN bill_amount ELSE 0 END) AS POM_Generated,\r\n        COUNT(CASE WHEN pom_generate_count > 0 AND pom_received_count = 0 AND verification_sent_count = 0 AND verification_received_count = 0 AND denial_status_id IS NULL AND payment_status_id IS NULL THEN 1 ELSE NULL END) AS POM_Generated_Count,\r\n        SUM(CASE WHEN pom_received_count > 0 AND verification_received_count = 0 AND verification_sent_count = 0 AND denial_status_id IS NULL AND payment_status_id IS NULL THEN bill_amount ELSE 0 END) AS POM_Received,\r\n        COUNT(CASE WHEN pom_received_count > 0 AND verification_received_count = 0 AND verification_sent_count = 0 AND denial_status_id IS NULL AND payment_status_id IS NULL THEN 1 ELSE NULL END) AS POM_Received_Count,\r\n        SUM(CASE WHEN verification_received_count > 0 AND verification_sent_count = 0 AND payment_status_id IS NULL THEN bill_amount ELSE 0 END) AS Verification_Sent,\r\n        COUNT(CASE WHEN verification_received_count > 0 AND verification_sent_count = 0 AND payment_status_id IS NULL THEN 1 ELSE NULL END) AS Verification_Sent_Count,\r\n        SUM(CASE WHEN verification_sent_count > 0 AND denial_status_id IS NULL AND payment_status_id IS NULL THEN bill_amount ELSE 0 END) AS Verification_Received,\r\n        COUNT(CASE WHEN verification_sent_count > 0 AND denial_status_id IS NULL AND payment_status_id IS NULL THEN 1 ELSE NULL END) AS Verification_Received_Count,\r\n        SUM(CASE WHEN denial_status_id IS NOT NULL AND payment_status_id IS NULL THEN bill_amount ELSE 0 END) AS Denied,\r\n        COUNT(CASE WHEN denial_status_id IS NOT NULL AND payment_status_id IS NULL THEN 1 ELSE NULL END) AS Denied_Count,\r\n        SUM(CASE WHEN payment_status_id = 1 THEN bill_amount ELSE 0 END) AS Partially_Paid,\r\n        COUNT(CASE WHEN payment_status_id = 1 THEN 1 ELSE NULL END) AS Partially_Paid_Count,\r\n        SUM(CASE WHEN payment_status_id = 2 THEN bill_amount ELSE 0 END) AS Fully_Paid,\r\n        COUNT(CASE WHEN payment_status_id = 2 THEN 1 ELSE NULL END) AS Fully_Paid_Count,\r\n        SUM(write_off_amount) AS Write_Off,\r\n        COUNT(CASE WHEN write_off_amount > 0 THEN 1 ELSE NULL END) AS Write_Off_Count,\r\n        SUM(bill_amount) AS Billed,\r\n        COUNT(bill_amount) AS Billed_Count,\r\n        SUM(over_payment) AS over_payment,\r\n        COUNT(CASE WHEN over_payment > 0 THEN 1 ELSE NULL END) AS over_payment_Count,\r\n        SUM(interest_amount) AS interest_amount,\r\n        COUNT(CASE WHEN interest_amount > 0 THEN 1 ELSE NULL END) AS interest_Count\r\n      FROM\r\n            bills_fact_new bf\r\n        JOIN bills_recipient_dim brd ON brd.bill_id= bf.bill_id\r\n        WHERE brd.bill_recipient_type_id= 3 AND ${whereClause}\r\n    ), total AS(\r\n      SELECT\r\n        SUM(bill_amount) AS Total_billed_Amount\r\n      FROM \r\n        bills_fact_new bf\r\n      WHERE ${whereClause}\r\n       )\r\n    SELECT\r\n      POM_Generated,POM_Generated_Count,POM_Received,POM_Received_Count,Verification_Sent,Verification_Sent_Count,Verification_Received,Verification_Received_Count,\r\n      Partially_Paid,Partially_Paid_Count,Fully_Paid,Fully_Paid_Count,Write_Off, Write_Off_Count,Billed,Billed_Count,Total_billed_Amount,Denied,Denied_Count,over_payment,interest_amount,\r\n      over_payment_Count,interest_Count\r\n        \r\n    FROM Claims,total\r\n              `;\n                // Execute the SQL query and get the results\n                const results = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(sqlQuery);\n                let obj = {\n                    total_amount: (results[0])[0]['total_billed_amount'], billed_amount: (results[0])[0]['billed'], Claims: [\n                        { claimStatus: 'POM Generated', noOfClaims: (results[0])[0]['pom_generated_count'], amountOfClaim: (results[0])[0]['pom_generated'] },\n                        { claimStatus: 'POM Received', noOfClaims: (results[0])[0]['pom_received_count'], amountOfClaim: (results[0])[0]['pom_received'] },\n                        { claimStatus: 'Verification Sent', noOfClaims: (results[0])[0]['verification_sent_count'], amountOfClaim: (results[0])[0]['verification_sent'] },\n                        { claimStatus: 'Verification Received', noOfClaims: (results[0])[0]['verification_received_count'], amountOfClaim: (results[0])[0]['verification_received'] },\n                        { claimStatus: 'Denied', noOfClaims: (results[0])[0]['denied_count'], amountOfClaim: (results[0])[0]['denied'] },\n                        { claimStatus: 'Partially Paid', noOfClaims: (results[0])[0]['partially_paid_count'], amountOfClaim: (results[0])[0]['partially_paid'] },\n                        { claimStatus: 'Fully Paid', noOfClaims: (results[0])[0]['fully_paid_count'], amountOfClaim: (results[0])[0]['fully_paid'] },\n                        { claimStatus: 'Over Payment', noOfClaims: (results[0])[0]['over_payment_count'], amountOfClaim: (results[0])[0]['over_payment'] },\n                        { claimStatus: 'Interest', noOfClaims: (results[0])[0]['interest_count'], amountOfClaim: (results[0])[0]['interest_amount'] },\n                        { claimStatus: 'Write Off', noOfClaims: (results[0])[0]['write_off_count'], amountOfClaim: (results[0])[0]['write_off'] },\n                    ]\n                };\n                obj.Claims.forEach((item) => {\n                    const percent = Number(((item.amountOfClaim / obj.billed_amount) * 100).toFixed(2));\n                    item['percentage'] = isNaN(percent) ? 0 : percent;\n                });\n                const paidPercent = Number((((Number((results[0])[0]['fully_paid']) + Number((results[0])[0]['partially_paid']) - Number((results[0])[0]['write_off']) + Number((results[0])[0]['over_payment'])) / obj.billed_amount) * 100).toFixed(2));\n                obj['paidPercentage'] = isNaN(paidPercent) ? 0 : paidPercent;\n                // Return the results\n                return obj;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        // #End regionF\n        //#region Billed_amount vs payment_amount for admin\n        this.getbilledpayments = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { recipient_id, case_type_ids, time_span_id, month_id, speciality_ids, provider_ids, facility_location_ids, fromDate, toDate, granularity_type_id, } = reqData;\n                let whereClause = `bf.deleted_at IS NULL `;\n                let selectClause = `DATE(bf.bill_date) AS BILL_date`;\n                let groupbyClause = `BILL_date`;\n                if (recipient_id) {\n                    whereClause += ` AND brd.bill_recipient_type_id::integer = ${recipient_id}`;\n                }\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND bf.speciality_id IN (${quotedSpecialityIds})`;\n                }\n                if (month_id) {\n                    const year = (new Date).getFullYear();\n                    whereClause += `AND EXTRACT('month' from bf.bill_date) = ${month_id}\r\n      AND EXTRACT('year' from bf.bill_date)= ${year}`; // fetches data of selected month\n                    selectClause = `DATE(DATE_TRUNC('week',bf.bill_date)) AS BILL_date`;\n                    groupbyClause = `DATE_TRUNC('week', BILL_date)`;\n                }\n                if (provider_ids && provider_ids.length > 0) {\n                    const quotedProviderIds = provider_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND bf.doctor_id IN (${quotedProviderIds})`;\n                }\n                if (case_type_ids && case_type_ids.length > 0) {\n                    const quotedCasetypeIds = case_type_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND bf.case_type_id IN (${quotedCasetypeIds})`;\n                }\n                if (facility_location_ids && facility_location_ids.length > 0) {\n                    const quotedLocationIds = facility_location_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND bf.facility_location_id IN (${quotedLocationIds})`;\n                }\n                if (fromDate && toDate) {\n                    whereClause += ` AND bf.bill_date >= '${fromDate}' AND bf.bill_date <= '${toDate} '`;\n                }\n                if (time_span_id) {\n                    let interval = '';\n                    switch (time_span_id) {\n                        case 1:\n                            interval = '1 week';\n                            break;\n                        case 2:\n                            interval = '1 month';\n                            selectClause = `DATE(DATE_TRUNC('week',bf.bill_date)) AS BILL_date`;\n                            groupbyClause = `DATE_TRUNC('week', BILL_date)`;\n                            break;\n                        case 3:\n                            interval = '6 months';\n                            selectClause = `DATE(DATE_TRUNC('month',bf.bill_date)) AS BILL_date`;\n                            groupbyClause = `DATE_TRUNC('month', BILL_date)`;\n                            break;\n                        case 4:\n                            interval = '1 year';\n                            selectClause = `DATE(DATE_TRUNC('month',bf.bill_date)) AS BILL_date`;\n                            groupbyClause = `DATE_TRUNC('month', BILL_date)`;\n                            break;\n                        case 5:\n                            const currentDate = new Date();\n                            const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n                            const daysDifference = Math.floor((currentDate.getTime() - firstDayOfMonth.getTime()) / (1000 * 60 * 60 * 24));\n                            interval = `${daysDifference} days`; // extracts days from start of month to cuurent date\n                            selectClause = `DATE(DATE_TRUNC('week',bf.bill_date)) AS BILL_date`;\n                            groupbyClause = `DATE_TRUNC('week', BILL_date)`;\n                            break;\n                        default:\n                            interval = '1 week';\n                    }\n                    whereClause += ` AND bf.bill_date >= current_date - interval '${interval}'\r\n                AND bf.bill_date < current_date`;\n                }\n                if (granularity_type_id) {\n                    switch (granularity_type_id) {\n                        case 1:\n                            selectClause = `DATE(bf.bill_date) AS BILL_date`;\n                            groupbyClause = `DATE(BILL_date)`;\n                            break;\n                        case 2:\n                            selectClause = `DATE(DATE_TRUNC('week',bf.bill_date)) AS BILL_date`;\n                            groupbyClause = `DATE_TRUNC('week', BILL_date) `;\n                            break;\n                        case 3:\n                            selectClause = `DATE(DATE_TRUNC('month',bf.bill_date)) AS BILL_date`;\n                            groupbyClause = `DATE_TRUNC('month', BILL_date) `;\n                            break;\n                        case 4:\n                            selectClause = `DATE(DATE_TRUNC('year',bf.bill_date)) AS BILL_date`;\n                            groupbyClause = `DATE_TRUNC('year', BILL_date)`;\n                            break;\n                        default:\n                            selectClause = `DATE(bf.bill_date) AS BILL_date`;\n                            groupbyClause = `DATE_TRUNC(BILL_date)`;\n                    }\n                }\n                const payment_detail_query = `\r\n      WITH bills AS (\r\n        SELECT\r\n           ${selectClause},\r\n            SUM(bill_amount) AS Billed_Amount,\r\n            SUM(paid_amount + over_payment) AS payment_Received\r\n        FROM\r\n            bills_fact_new bf\r\n        JOIN bills_recipient_dim brd ON brd.bill_id = bf.bill_id\r\n        WHERE\r\n            ${whereClause}\r\n        GROUP BY\r\n            ${groupbyClause}\r\n    )\r\n    \r\n    SELECT BILL_date, Billed_Amount, payment_Received\r\n    FROM bills;`;\n                const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']; // Labels for days\n                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // Labels for months\n                const output = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(payment_detail_query);\n                const outputdata = output[0];\n                const ModifiedData = output.reduce((result, item) => {\n                    const avalaiblebillDate = result.find((i) => i.bill_date === item.bill_date);\n                    if (avalaiblebillDate) {\n                        avalaiblebillDate.billed_amount += parseFloat(item.billed_amount);\n                        avalaiblebillDate.payment_received += parseFloat(item.payment_received);\n                        avalaiblebillDate.count += parseInt(item.count);\n                    }\n                    else {\n                        result.push({\n                            bill_date: item.bill_date,\n                            billed_amount: parseFloat(item.billed_amount),\n                            payment_received: parseFloat(item.payment_received),\n                            count: parseInt(item.count),\n                        });\n                    }\n                    return outputdata;\n                }, []);\n                let newresult = ModifiedData;\n                newresult.forEach(function (value) {\n                    let dateLabel = value.bill_date;\n                    if (time_span_id) {\n                        switch (time_span_id) {\n                            case 1:\n                                let day = new Date(value.bill_date);\n                                dateLabel = days[day.getDay()]; // Group data by day labels\n                                value.bill_date = dateLabel;\n                                break;\n                            case 2:\n                                dateLabel = value.bill_date;\n                                break;\n                            case 3:\n                                let monthSemester = new Date(value.bill_date);\n                                dateLabel = months[monthSemester.getMonth()]; // Group data by month labels\n                                value.bill_date = dateLabel;\n                                break;\n                            case 4:\n                                let monthYear = new Date(value.bill_date);\n                                dateLabel = months[monthYear.getMonth()]; // Group data by month labels\n                                value.bill_date = dateLabel;\n                                break;\n                            case 5:\n                                dateLabel = value.bill_date;\n                                break;\n                            default:\n                                let def = new Date(value.bill_date);\n                                dateLabel = days[def.getDay()];\n                                value.bill_date = dateLabel;\n                        }\n                    }\n                    if (granularity_type_id) {\n                        switch (granularity_type_id) {\n                            case 2:\n                                let weekSemester = new Date(value.bill_date);\n                                dateLabel = months[weekSemester.getDate()];\n                                dateLabel = value.bill_date;\n                                break;\n                            case 3:\n                                let monthSemester = new Date(value.bill_date);\n                                dateLabel = months[monthSemester.getMonth()];\n                                value.bill_date = dateLabel;\n                                break;\n                            case 4:\n                                let monthYear = new Date(value.bill_date);\n                                dateLabel = monthYear.getUTCFullYear(); // Group data by month labels\n                                value.bill_date = dateLabel;\n                                break;\n                        }\n                    }\n                });\n                return newresult;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        //#region \n        this.getHigherPayerTypeService = (reqData, _authorization) => __awaiter(this, void 0, void 0, function* () {\n            let pushANDConditions = [`bfti.deleted_at IS NULL`];\n            const oneWeek = `bfti.bill_date >=(CURRENT_DATE - INTERVAL '1 week')`;\n            const oneMonth = `(bfti.bill_date >= CURRENT_DATE - INTERVAL '1 month')`;\n            const sixMonths = `(CURRENT_DATE - INTERVAL '6 months' <= bfti.bill_date)`;\n            const oneYear = `(CURRENT_DATE - INTERVAL '1 year') <= bfti.bill_date`;\n            const MTD = `(bfti.bill_date >= DATE_TRUNC('month', CURRENT_DATE) AND bfti.bill_date <= CURRENT_DATE)`;\n            const specificMonth = `EXTRACT(YEAR FROM bfti.bill_date) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM bfti.bill_date) = `;\n            const { time_span_id, month_id, speciality_ids, provider_ids, facility_location_ids, case_type_ids, fromDate, toDate, granularity_type_id } = reqData;\n            ///////   request object with time_span_id enums { 1, 2, 3, 4, 5}\n            if (time_span_id && (time_span_id != 0)) {\n                switch (time_span_id) {\n                    case 1:\n                        pushANDConditions.push(`${oneWeek}`);\n                        break;\n                    case 2:\n                        pushANDConditions.push(`${oneMonth}`);\n                        break;\n                    case 3:\n                        pushANDConditions.push(`${sixMonths}`);\n                        break;\n                    case 4:\n                        pushANDConditions.push(`${oneYear}`);\n                        break;\n                    case 5:\n                        pushANDConditions.push(`${MTD}`);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            ///////   request object with month_id enums { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}\n            if (month_id && (month_id != 0)) {\n                pushANDConditions.push(`${specificMonth}${month_id}`);\n            }\n            ///////   request object with speciality_ids array of integers\n            if (speciality_ids && speciality_ids.length > 0) {\n                const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                pushANDConditions.push(`bfti.speciality_id IN (${quotedSpecialityIds})`);\n            }\n            ///////   request object with provider_ids array of integers\n            if (provider_ids && provider_ids.length > 0) {\n                const quotedProviderIds = provider_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                pushANDConditions.push(`bfti.doctor_id::integer IN (${quotedProviderIds})`);\n            }\n            ///////   request object with facility_location_ids array of integers\n            if (facility_location_ids && facility_location_ids.length > 0) {\n                const quotedLocationIds = facility_location_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                pushANDConditions.push(`bfti.facility_location_id::integer IN (${quotedLocationIds})`);\n            }\n            ///////   request object with case_type_ids array of integers\n            if (case_type_ids && case_type_ids.length > 0) {\n                const quotedCaseTypeIds = case_type_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                pushANDConditions.push(`bfti.case_type_id IN (${quotedCaseTypeIds})`);\n            }\n            ///////   request object with fromDate for starting date of fetching data\n            if (fromDate) {\n                pushANDConditions.push(`bfti.bill_date >= '${fromDate}'`);\n            }\n            ///////   request object with toDate for ending date of fetching data\n            if (toDate) {\n                pushANDConditions.push(`bfti.bill_date <='${toDate}'`);\n            }\n            ///////   Query\n            let query = `\r\n        WITH ExtractedPatientData AS (\r\n        SELECT DISTINCT\r\n          bfti.bill_id,\r\n          pbrd.bill_recipient_type_id,\r\n          pbrd.bill_recipient_type_name,\r\n              pbrd.patient_id AS id,\r\n              pbrd.bill_recipient_name AS name,\r\n              SUM(bfti.paid_amount+bfti.over_payment) AS paid_amount\r\n        FROM bills_fact_new AS bfti\r\n      LEFT JOIN\r\n              bills_recipient_dim AS pbrd ON pbrd.bill_id = bfti.bill_id\r\n          WHERE\r\n              pbrd.bill_recipient_type_id = 1\r\n      AND ${pushANDConditions.join(' AND ')}\r\n        GROUP BY  pbrd.patient_id, pbrd.bill_recipient_name, pbrd.bill_recipient_type_id, pbrd.bill_recipient_type_name, bfti.bill_id\r\n      ), ExtractedEmployerData AS (\r\n        SELECT DISTINCT\r\n          bfti.bill_id,\r\n          ebrd.bill_recipient_type_id,\r\n          ebrd.bill_recipient_type_name,\r\n              ebrd.employer_id AS id,\r\n              ebrd.bill_recipient_name AS name,\r\n              SUM(bfti.paid_amount+bfti.over_payment) AS paid_amount\r\n        FROM bills_fact_new AS bfti\r\n      LEFT JOIN\r\n              bills_recipient_dim AS ebrd ON ebrd.bill_id = bfti.bill_id\r\n          WHERE\r\n              ebrd.bill_recipient_type_id = 2\r\n              AND ${pushANDConditions.join(' AND ')}\r\n        GROUP BY  ebrd.employer_id, ebrd.bill_recipient_name, ebrd.bill_recipient_type_id, ebrd.bill_recipient_type_name, bfti.bill_id\r\n      ), ExtractedInsuranceData AS (\r\n        SELECT DISTINCT\r\n          bfti.bill_id,\r\n          ibrd.bill_recipient_type_id,\r\n          ibrd.bill_recipient_type_name,\r\n              ibrd.insurance_id AS id,\r\n              ibrd.bill_recipient_name AS name,\r\n              SUM(bfti.paid_amount+bfti.over_payment) AS paid_amount\r\n        FROM bills_fact_new AS bfti\r\n      LEFT JOIN\r\n              bills_recipient_dim AS ibrd ON ibrd.bill_id = bfti.bill_id\r\n          WHERE\r\n              ibrd.bill_recipient_type_id = 3\r\n            AND ${pushANDConditions.join(' AND ')}\r\n        GROUP BY  ibrd.insurance_id, ibrd.bill_recipient_name, ibrd.bill_recipient_type_id,ibrd.bill_recipient_type_name, bfti.bill_id\r\n      ), ExtractedFirmData AS (\r\n        SELECT DISTINCT\r\n          bfti.bill_id,\r\n          fbrd.bill_recipient_type_id,\r\n          fbrd.bill_recipient_type_name,\r\n              fbrd.firm_id AS id,\r\n              fbrd.bill_recipient_name AS name,\r\n              SUM(bfti.paid_amount+bfti.over_payment) AS paid_amount\r\n        FROM bills_fact_new AS bfti\r\n      LEFT JOIN\r\n              bills_recipient_dim AS fbrd ON fbrd.bill_id = bfti.bill_id\r\n          WHERE\r\n              fbrd.bill_recipient_type_id = 4\r\n        AND ${pushANDConditions.join(' AND ')}\r\n        GROUP BY  fbrd.firm_id, fbrd.bill_recipient_name, fbrd.bill_recipient_type_id,fbrd.bill_recipient_type_name, bfti.bill_id\r\n      ), PatientDataStats AS (\r\n        SELECT\r\n          COUNT(DISTINCT pd.bill_id) as count,\r\n          pd.id::integer as id,\r\n            pd.name as name,\r\n          SUM(pd.paid_amount) as paid_amount,\r\n          pd.bill_recipient_type_id AS payer_type_id,\r\n          pd.bill_recipient_type_name AS payer_type_name\r\n        FROM ExtractedPatientData AS pd\r\n        GROUP BY pd.id, pd.name, pd.bill_recipient_type_id, pd.bill_recipient_type_name\r\n        ORDER BY paid_amount DESC\r\n        LIMIT 10\r\n      ), EmployerDataStats AS (\r\n        SELECT\r\n          COUNT(DISTINCT ed.bill_id) as count,\r\n          ed.id::integer as id,\r\n            ed.name as name,\r\n          SUM(ed.paid_amount) as paid_amount,\r\n          ed.bill_recipient_type_id AS payer_type_id,\r\n          ed.bill_recipient_type_name AS payer_type_name\r\n        FROM ExtractedEmployerData AS ed\r\n        GROUP BY ed.id, ed.name, ed.bill_recipient_type_id, ed.bill_recipient_type_name\r\n        ORDER BY paid_amount DESC\r\n        LIMIT 10\r\n      ), InsuranceDataStats AS (\r\n        SELECT\r\n          COUNT(DISTINCT insd.bill_id) as count,\r\n          insd.id::integer as id,\r\n            insd.name as name,\r\n          SUM(insd.paid_amount) as paid_amount,\r\n          insd.bill_recipient_type_id AS payer_type_id,\r\n          insd.bill_recipient_type_name AS payer_type_name\r\n        FROM ExtractedInsuranceData AS insd\r\n        GROUP BY insd.id, insd.name, insd.bill_recipient_type_id, insd.bill_recipient_type_name\r\n        ORDER BY paid_amount DESC\r\n        LIMIT 10\r\n      ), FirmDataStats AS (\r\n        SELECT\r\n          COUNT(DISTINCT efd.bill_id) as count,\r\n          efd.id::integer as id,\r\n            efd.name as name,\r\n          SUM(efd.paid_amount) as paid_amount,\r\n          efd.bill_recipient_type_id AS payer_type_id,\r\n          efd.bill_recipient_type_name AS payer_type_name\r\n        FROM ExtractedFirmData AS efd\r\n        GROUP BY efd.id, efd.name, efd.bill_recipient_type_id, efd.bill_recipient_type_name\r\n        ORDER BY paid_amount DESC\r\n        LIMIT 10\r\n      )\r\n      SELECT\r\n        fpd.payer_type_id AS payer_type_id,\r\n        fpd.payer_type_name AS payer_type_name,\r\n        json_agg(\r\n          jsonb_build_object('id', id, 'name', name, 'bills_count', count, 'paid_amount', paid_amount)) AS payer_data\r\n      FROM PatientDataStats AS fpd\r\n      GROUP BY fpd.payer_type_id, fpd.payer_type_name\r\n      UNION ALL\r\n      SELECT\r\n        fed.payer_type_id AS payer_type_id,\r\n        fed.payer_type_name AS payer_type_name,\r\n        json_agg(\r\n          jsonb_build_object('id', id, 'name', name, 'bills_count', count, 'paid_amount', paid_amount)) AS payer_data\r\n      FROM EmployerDataStats AS fed\r\n      GROUP BY fed.payer_type_id, fed.payer_type_name\r\n      UNION ALL\r\n      SELECT\r\n        fid.payer_type_id AS payer_type_id,\r\n        fid.payer_type_name AS payer_type_name,\r\n        json_agg(\r\n          jsonb_build_object('id', id, 'name', name, 'bills_count', count, 'paid_amount', paid_amount)) AS payer_data\r\n      FROM InsuranceDataStats AS fid\r\n      GROUP BY fid.payer_type_id, fid.payer_type_name\r\n      UNION ALL\r\n      SELECT\r\n        fd.payer_type_id AS payer_type_id,\r\n        fd.payer_type_name AS payer_type_name,\r\n        json_agg(\r\n          jsonb_build_object('id', id, 'name', name, 'bills_count', count, 'paid_amount', paid_amount)) AS payer_data\r\n      FROM FirmDataStats AS fd\r\n      GROUP BY fd.payer_type_id, fd.payer_type_name\r\n  `;\n            ///////   Retrieve data\n            const result = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(query, { type: sequelize__WEBPACK_IMPORTED_MODULE_0__.QueryTypes.SELECT });\n            ///////   Reset condition Arrays\n            pushANDConditions = [];\n            return result;\n        });\n        this.__http = new http();\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/services/admin.service.ts?");

/***/ }),

/***/ "./src/services/global.service.ts":
/*!****************************************!*\
  !*** ./src/services/global.service.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GlobalService: () => (/* binding */ GlobalService)\n/* harmony export */ });\n/* harmony import */ var sequelize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sequelize */ \"sequelize\");\n/* harmony import */ var sequelize__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sequelize__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _config_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/database */ \"./src/config/database.ts\");\n/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared */ \"./src/shared/index.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nclass GlobalService extends _shared__WEBPACK_IMPORTED_MODULE_2__.Helper {\n    constructor(http) {\n        super();\n        this.http = http;\n        this.get = (reqData, _authorization) => __awaiter(this, void 0, void 0, function* () {\n            let query1 = `\r\n        WITH extractedData AS(\r\n            SELECT \r\n                facilities.facility_id AS facility_id,\r\n                facilities.facility_name AS facility_name,\r\n                LF.facility_location_id AS facility_location_id,\r\n                FLD.facility_location_id AS facility_location_id_FLD,\r\n                FLD.facility_location_name AS facility_location_name,\r\n                LF.specialty_id AS speciality_id,\r\n                specialities.name AS speciality_name,\r\n                PS.physician_id AS physician_id,\r\n                concat(physicians.first_name,' ', physicians.middle_name, ' ',physicians.last_name) AS physician_name\r\n            FROM user_facilities_dim AS LF\r\n            INNER JOIN facility_location_dim FLD ON LF.facility_location_id = FLD.facility_location_id\r\n            INNER JOIN physician_specialities_dim PS ON LF.specialty_id = PS.speciality_id\r\n            LEFT JOIN facilities_dim AS facilities ON FLD.facility_id = facilities.facility_id\r\n            LEFT JOIN specialities_dim AS specialities ON PS.speciality_id = specialities.speciality_id\r\n            LEFT JOIN physician_dim AS physicians ON PS.physician_id = physicians.physician_id\r\n            ORDER BY FLD.facility_location_id\r\n            ), LocationsDis AS (\r\n                    select DISTINCT\r\n                        facility_id::integer,\r\n                        facility_name,\r\n                    facility_location_id::integer,\r\n                    facility_location_name\r\n                    from extractedData\r\n\t\r\n\t    ), SpecProvs AS ( \r\n            SELECT\r\n            ed.facility_id::integer,\r\n            ed.facility_name,\r\n            JSON_AGG(\r\n                JSON_BUILD_OBJECT(\r\n                    'facility_location_id', ed.facility_location_id::integer,\r\n                    'facility_location_name', ed.facility_location_name,\r\n                    'speciality_id', ed.speciality_id::integer,\r\n                    'speciality_name', ed.speciality_name\r\n                )\r\n        ) AS specialities,\r\n            JSON_AGG(\r\n                JSON_BUILD_OBJECT(\r\n                    'speciality_id', ed.speciality_id::integer,\r\n                    'speciality_name', ed.speciality_name,\r\n                    'provider_id', ed.physician_id::integer,\r\n                    'provider_name', ed.physician_name\r\n                )\r\n            ) AS providers\r\n            FROM extractedData AS ed\r\n            GROUP BY facility_id, facility_name\r\n\t\t), LocsGrouped AS (\r\n\t\t    select \r\n                ed.facility_id::integer,\r\n                ed.facility_name,\r\n                JSON_AGG(\r\n                    JSON_BUILD_OBJECT(\r\n                        'facility_location_id', ed.facility_location_id::integer,\r\n                        'facility_location_name', ed.facility_location_name,\r\n                        'facility_id', ed.facility_id::integer,\r\n                        'facility_name', ed.facility_name\r\n                    ) \r\n                ) AS locations \r\n\t\t\tfrom LocationsDis AS ed\r\n\t\t\tGROUP BY facility_id, facility_name\r\n\t\t) select * from SpecProvs JOIN LocsGrouped ON LocsGrouped.facility_id = SpecProvs.facility_id\r\n        `;\n            let query2 = `\r\n            SELECT\r\n                JSON_AGG(\r\n                    JSON_BUILD_OBJECT(\r\n                        'case_type_id', ctd.case_type_id::integer,\r\n                        'case_type_name', ctd.name\r\n                    )\r\n                ) AS casetypes\r\n            FROM case_types_dim as ctd\r\n        `;\n            const dependent = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(query1, { type: sequelize__WEBPACK_IMPORTED_MODULE_0__.QueryTypes.SELECT });\n            const independent = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(query2, { type: sequelize__WEBPACK_IMPORTED_MODULE_0__.QueryTypes.SELECT });\n            const result = {\n                dependents: dependent,\n                independent: independent\n            };\n            return result;\n        });\n        this.__http = new http();\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/services/global.service.ts?");

/***/ }),

/***/ "./src/services/index.ts":
/*!*******************************!*\
  !*** ./src/services/index.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminService: () => (/* binding */ adminService),\n/* harmony export */   globalService: () => (/* binding */ globalService),\n/* harmony export */   practiceManagerService: () => (/* binding */ practiceManagerService),\n/* harmony export */   providerService: () => (/* binding */ providerService),\n/* harmony export */   userService: () => (/* binding */ userService)\n/* harmony export */ });\n/* harmony import */ var _repositories__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../repositories */ \"./src/repositories/index.ts\");\n/* harmony import */ var _shared_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/http */ \"./src/shared/http.ts\");\n/* harmony import */ var _admin_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./admin.service */ \"./src/services/admin.service.ts\");\n/* harmony import */ var _practice_manager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./practice.manager.service */ \"./src/services/practice.manager.service.ts\");\n/* harmony import */ var _provider_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./provider.service */ \"./src/services/provider.service.ts\");\n/* harmony import */ var _global_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./global.service */ \"./src/services/global.service.ts\");\n/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./user.service */ \"./src/services/user.service.ts\");\n\n\n\n\n\n\n\nconst userService = new _user_service__WEBPACK_IMPORTED_MODULE_6__.UserService(_repositories__WEBPACK_IMPORTED_MODULE_0__.userRepository, _shared_http__WEBPACK_IMPORTED_MODULE_1__.Http);\nconst adminService = new _admin_service__WEBPACK_IMPORTED_MODULE_2__.AdminService(_shared_http__WEBPACK_IMPORTED_MODULE_1__.Http);\nconst practiceManagerService = new _practice_manager_service__WEBPACK_IMPORTED_MODULE_3__.PracticeManagerService(_shared_http__WEBPACK_IMPORTED_MODULE_1__.Http);\nconst providerService = new _provider_service__WEBPACK_IMPORTED_MODULE_4__.ProviderService(_shared_http__WEBPACK_IMPORTED_MODULE_1__.Http);\nconst globalService = new _global_service__WEBPACK_IMPORTED_MODULE_5__.GlobalService(_shared_http__WEBPACK_IMPORTED_MODULE_1__.Http);\n\n\n//# sourceURL=webpack://ovada_analytics/./src/services/index.ts?");

/***/ }),

/***/ "./src/services/practice.manager.service.ts":
/*!**************************************************!*\
  !*** ./src/services/practice.manager.service.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PracticeManagerService: () => (/* binding */ PracticeManagerService)\n/* harmony export */ });\n/* harmony import */ var sequelize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sequelize */ \"sequelize\");\n/* harmony import */ var sequelize__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sequelize__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _config_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/database */ \"./src/config/database.ts\");\n/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared */ \"./src/shared/index.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\nclass PracticeManagerService extends _shared__WEBPACK_IMPORTED_MODULE_2__.Helper {\n    constructor(http) {\n        super();\n        this.http = http;\n        this.getSummaryChart = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { time_span_id, month_id, facility_location_ids, speciality_ids, case_type_ids, provider_ids, fromDate, toDate } = reqData;\n                let fromdate;\n                let todate;\n                let prevTime;\n                let change;\n                let time;\n                let whereClause = '';\n                let schCurTime;\n                let schPreTime;\n                let nextMonth, nextYear;\n                let visitCurTime;\n                let visitPreTime;\n                let createCurTime;\n                let createPreTime;\n                let daysDifference;\n                let billPreTime;\n                let billCurTime;\n                // Check if time_span_id exists\n                if (time_span_id) {\n                    switch (time_span_id) {\n                        // Set time values based on time_span_id\n                        case 1:\n                            time = '1 week';\n                            prevTime = '2 week';\n                            break;\n                        case 2:\n                            time = '1 month';\n                            prevTime = '2 month';\n                            break;\n                        case 3:\n                            time = '6 month';\n                            prevTime = '12 month';\n                            break;\n                        case 4:\n                            time = '1 year';\n                            prevTime = '2 year';\n                            break;\n                        case 5:\n                            // Set time values based on current date for 5 days\n                            const currentDate = new Date();\n                            let totalCurrentDate = currentDate.getDate();\n                            time = totalCurrentDate + ' days';\n                            prevTime = (2 * totalCurrentDate) + ' days';\n                            break;\n                        default:\n                            time = '1 week';\n                            prevTime = '2 week';\n                            break;\n                    }\n                    // Construct time intervals for SQL queries\n                    schCurTime = ` scheduled_date_time >= (current_date - INTERVAL '${time}') AND scheduled_date_time < current_date`;\n                    schPreTime = ` scheduled_date_time >= (current_date - INTERVAL '${prevTime}') AND scheduled_date_time < current_date - INTERVAL '${time}'`;\n                    visitCurTime = ` visit_date >= (current_date - INTERVAL '${time}') AND visit_date < current_date `;\n                    visitPreTime = ` visit_date >= (current_date - INTERVAL '${prevTime}') AND visit_date < (current_date - INTERVAL '${time}')`;\n                    createCurTime = ` created_at >= (current_date - INTERVAL '${time}') AND created_at < current_date`;\n                    createPreTime = `created_at >= (current_date - INTERVAL '${prevTime}') AND created_at < (current_date - INTERVAL '${time}')`;\n                }\n                // Check if facility_location_ids exist\n                if (facility_location_ids && facility_location_ids.length > 0) {\n                    const quotedfacility_location_ids = facility_location_ids.map(id => `${id}`).join(', ');\n                    // Create quoted facility_location_ids for SQL query\n                    whereClause += ` AND facility_location_id IN (${quotedfacility_location_ids}) `;\n                }\n                // Check if case_type_ids exist\n                if (case_type_ids && case_type_ids.length > 0) {\n                    const quotedcase_type_ids = facility_location_ids.map(id => `${id}`).join(', ');\n                    // Create quoted case_type_ids for SQL query\n                    whereClause += ` AND case_type_id IN (${quotedcase_type_ids}) `;\n                }\n                // Check if speciality_ids exist\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `${id}`).join(', ');\n                    whereClause += ` AND speciality_id IN (${quotedSpecialityIds})`;\n                }\n                // Check if provider_ids exist\n                if (provider_ids && provider_ids.length > 0) {\n                    // Create quoted provider_ids for SQL query\n                    const quotedprovider_ids = provider_ids.map(id => `${id}`).join(', ');\n                    whereClause += ` AND provider_id IN (${quotedprovider_ids})`;\n                }\n                if (fromDate && toDate) {\n                    const fromdateObj = new Date(fromDate);\n                    const todateObj = new Date(toDate);\n                    const dateDifferenceMilliseconds = todateObj.getTime() - fromdateObj.getTime(); // Calculate the difference in milliseconds\n                    daysDifference = (dateDifferenceMilliseconds / (1000 * 60 * 60 * 24)) + ' days'; // Convert milliseconds to days\n                    schCurTime = ` scheduled_date_time >= '${fromDate}'::DATE AND scheduled_date_time <= '${toDate}'::DATE`;\n                    schPreTime = ` scheduled_date_time >= ('${fromDate}'::DATE - INTERVAL '${daysDifference}') AND scheduled_date_time <= '${fromDate}'::DATE`;\n                    visitCurTime = ` visit_date >= '${fromDate}'::DATE  AND visit_date < '${toDate}'::DATE `;\n                    visitPreTime = ` visit_date >= ('${fromDate}'::DATE - INTERVAL '${daysDifference}') AND visit_date <= '${fromDate}'::DATE`;\n                    createCurTime = ` created_at >= '${fromDate}'::DATE AND created_at < '${toDate}'::DATE`;\n                    createPreTime = ` created_at >= ('${fromDate}'::DATE - INTERVAL '${daysDifference}') AND created_at <= '${fromDate}'::DATE`;\n                }\n                // Check if month_id is provided and not 0\n                if (month_id && month_id != 0) {\n                    let dayInMonth;\n                    const currentDate = new Date();\n                    const currentYear = currentDate.getFullYear();\n                    const currentMonth = currentDate.getMonth() + 1;\n                    // Calculate the total days and start/end dates for the specified month\n                    dayInMonth = this.daysInMonth(currentYear, month_id);\n                    fromdate = this.formatDateToYYYYMMDD(dayInMonth.startDate);\n                    todate = this.formatDateToYYYYMMDD(dayInMonth.endDate);\n                    daysDifference = dayInMonth.totalDays + ' days';\n                    // Construct time intervals for SQL queries based on the specified month\n                    schCurTime = ` scheduled_date_time >= '${fromdate}'::DATE AND scheduled_date_time <= '${todate}'::DATE`;\n                    schPreTime = ` scheduled_date_time >= ('${fromdate}'::DATE - INTERVAL '${daysDifference}') AND scheduled_date_time <= '${fromdate}'::DATE`;\n                    visitCurTime = ` visit_date >= '${fromdate}'::DATE  AND visit_date < '${todate}'::DATE `;\n                    visitPreTime = ` visit_date >= ('${fromdate}'::DATE - INTERVAL '${daysDifference}') AND visit_date <= '${fromdate}'::DATE`;\n                    createCurTime = ` created_at >= '${fromdate}'::DATE AND created_at < '${todate}'::DATE`;\n                    createPreTime = ` created_at >= ('${fromdate}'::DATE - INTERVAL '${daysDifference}') AND created_at <= '${fromdate}'::DATE`;\n                }\n                // SQL query to retrieve summary chart data\n                const query = `WITH subquery AS (\r\n                SELECT\r\n                    (SELECT COUNT(*)\r\n FROM appointment_fact WHERE appointment_status_id = 13 AND cancelled_id != '1' AND ${schCurTime} ${whereClause} ) AS current_appointments,\r\n                    (SELECT COUNT(*)\r\n FROM appointment_fact WHERE appointment_status_id IS NOT NULL AND ${schCurTime} ${whereClause}) AS current_total_appointments,\r\n                    (SELECT COUNT(*)\r\n FROM appointment_fact WHERE appointment_status_id = 13 AND cancelled_id != '1' AND ${schPreTime} ${whereClause}) AS previous_appointments,\r\n                    (SELECT COUNT(*)\r\n FROM appointment_fact WHERE appointment_status_id IS NOT NULL AND ${schPreTime} ${whereClause}) AS previous_total_appointments\r\n            ),\r\n            subquery2 AS (\r\n                SELECT\r\n                    (SELECT COUNT(*)\r\n FROM appointment_fact WHERE ${schCurTime} ${whereClause}) AS cancel_total,\r\n                    (SELECT COUNT(*)\r\n FROM appointment_fact WHERE (cancelled_id = '1' OR appointment_status_id = 2) AND ${schCurTime} ${whereClause}) AS current_cancel,\r\n                    (SELECT COUNT(*)\r\n FROM appointment_fact WHERE ${schPreTime} ${whereClause}) AS previous_total,\r\n                    (SELECT COUNT(*)\r\n FROM appointment_fact WHERE (cancelled_id = '1' OR appointment_status_id = 2) AND ${schPreTime} ${whereClause}) AS previous_cancel\r\n            ),\r\n            subquery3 AS (\r\n                SELECT\r\n                    (SELECT ROUND(AVG(EXTRACT(MINUTE FROM scheduled_date_time::timestamp - (evaluation_date_time::timestamp))),2) FROM appointment_fact WHERE ${schCurTime} ${whereClause}) AS current_wait_time,\r\n                    (SELECT ROUND(AVG(EXTRACT(MINUTE FROM scheduled_date_time::timestamp - (evaluation_date_time::timestamp))),2) FROM appointment_fact WHERE ${schPreTime} ${whereClause}) AS previous_wait_time\r\n            ),\r\n            subquery4 AS (\r\n                SELECT\r\n                    (SELECT COUNT(*)\r\n FROM bills_fact_new WHERE denial_status_id IS NOT NULL AND ${createCurTime} ${whereClause}) AS current_denial,\r\n                    (SELECT COUNT(*)\r\n FROM bills_fact_new WHERE ${createCurTime} ${whereClause}) AS current_denial_total,\r\n                    (SELECT COUNT(*)\r\n FROM bills_fact_new WHERE denial_status_id IS NOT NULL AND ${createPreTime} ${whereClause}) AS previous_denial,\r\n                    (SELECT COUNT(*)\r\n FROM bills_fact_new WHERE ${createPreTime} ${whereClause}) AS previous_denial_total\r\n            ),\r\n            subquery5 AS (\r\n                SELECT\r\n                    (SELECT COUNT(*)\r\n FROM visits_fact WHERE visit_session_state_id IN (1,2) AND ${visitCurTime} ${whereClause}) AS current_unbilled,\r\n                    (SELECT COUNT(*)\r\n FROM visits_fact WHERE ${visitCurTime} ${whereClause}) AS current_unbilled_total,\r\n                    (SELECT COUNT(*)\r\n FROM visits_fact WHERE visit_session_state_id IN (1,2) AND ${visitPreTime} ${whereClause}) AS previous_unbilled,\r\n                    (SELECT COUNT(*)\r\n FROM visits_fact WHERE ${visitPreTime} ${whereClause}) AS previous_unbilled_total\r\n            )\r\n            \r\n            SELECT\r\n                current_appointments,current_total_appointments,\r\n                previous_appointments,previous_total_appointments,\r\n                cancel_total,current_cancel,previous_total,previous_cancel,\r\n                current_wait_time,previous_wait_time,current_wait_time - previous_wait_time AS changed_wait_time,\r\n                current_denial,current_denial_total,previous_denial,previous_denial_total,\r\n                current_unbilled,current_unbilled_total,previous_unbilled,previous_unbilled_total\r\n            FROM subquery,subquery2,subquery3,subquery4,subquery5;`;\n                const info = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(query, { type: sequelize__WEBPACK_IMPORTED_MODULE_0__.QueryTypes.SELECT });\n                let queryData = info[0];\n                const Denial_Rate_current = ((queryData['current_denial'] / queryData['current_denial_total']) * 100) || 0;\n                const Denial_Rate_previous = (queryData['previous_denial'] / queryData['previous_denial_total']) * 100 || 0;\n                change = Denial_Rate_current - Denial_Rate_previous;\n                const Denial_Rate_changed = Math.abs((change / Denial_Rate_previous) * 100) || 0;\n                const Denial_is_Positive = (change) >= 0;\n                // Calculate Cancel metrics\n                const Cancel_current = (queryData['current_cancel'] / queryData['cancel_total']) * 100 || 0;\n                const Cancel_previous = (queryData['previous_cancel'] / queryData['previous_total']) * 100 || 0;\n                change = Cancel_current - Cancel_previous;\n                const Cancel_changed = Math.abs((change / Cancel_previous) * 100) || 0;\n                const Cancel_is_Positive = (change) >= 0;\n                // Calculate Unbilled Visit metrics\n                const Unbilled_Visit_current = (queryData['current_unbilled'] / queryData['current_unbilled_total']) * 100 || 0;\n                const Unbilled_Visit_previous = (queryData['previous_unbilled'] / queryData['previous_unbilled_total']) * 100 || 0;\n                change = Unbilled_Visit_current - Unbilled_Visit_previous;\n                const Unbilled_Visit_changed = Math.abs((change / Unbilled_Visit_previous) * 100) || 0;\n                const Unbilled_is_Positive = (change) >= 0;\n                // Calculate Appointment metrics\n                const Appointment_current = (queryData['current_appointments'] / queryData['current_total_appointments']) * 100 || 0;\n                const Appointment_previous = (queryData['previous_appointments'] / queryData['previous_total_appointments']) * 100 || 0;\n                change = Appointment_current - Appointment_previous;\n                const Appointment_changed = Math.abs((change / Appointment_previous) * 100) || 0;\n                const Appointment_is_Positive = (change) >= 0;\n                // Calculate WaitTime metrics\n                const WaitTime_current = queryData['current_wait_time'] || 0;\n                const WaitTime_previous = queryData['previous_wait_time'] || 0;\n                const WaitTime_changed = Math.abs(((WaitTime_current - WaitTime_previous) / WaitTime_previous) * 100) || 0;\n                const WaitTime_is_Positive = (queryData['changed_wait_time']) >= 0;\n                // Converting query data into required flat data as in contracts.\n                const flatData = {\n                    Denial_Rate_current_number: queryData['current_denial'] || 0,\n                    Denial_Rate_current_total_number: queryData['current_denial_total'] || 0,\n                    Denial_Rate_previous_number: queryData['previous_denial'] || 0,\n                    Denial_Rate_previous_total_number: queryData['previous_denial_total'] || 0,\n                    Denial_Rate_current,\n                    Denial_Rate_previous,\n                    Denial_Rate_changed,\n                    Denial_is_Positive,\n                    Cancel_current_number: queryData['current_cancel'] || 0,\n                    Cancel_current_total_number: queryData['cancel_total'] || 0,\n                    Cancel_previous_number: queryData['previous_cancel'] || 0,\n                    Cancel_previous_total_number: queryData['previous_total'] || 0,\n                    Cancel_current,\n                    Cancel_previous,\n                    Cancel_changed,\n                    Cancel_is_Positive,\n                    Unbilled_Visit_current_number: queryData['current_unbilled'],\n                    Unbilled_Visit_current_total_number: queryData['current_unbilled_total'] || 0,\n                    Unbilled_Visit_previous_number: queryData['previous_unbilled'] || 0,\n                    Unbilled_Visit_previous_total_number: queryData['previous_unbilled_total'] || 0,\n                    Unbilled_Visit_current,\n                    Unbilled_Visit_previous,\n                    Unbilled_Visit_changed,\n                    Unbilled_is_Positive,\n                    Appointment_current_number: queryData['current_appointments'] || 0,\n                    Appointment_current_total_number: queryData['current_total_appointments'] || 0,\n                    Appointment_previous_number: queryData['previous_appointments'] || 0,\n                    Appointment_previous_total_number: queryData['previous_total_appointments'] || 0,\n                    Appointment_current,\n                    Appointment_previous,\n                    Appointment_changed,\n                    Appointment_is_Positive,\n                    WaitTime_current,\n                    WaitTime_previous,\n                    WaitTime_changed,\n                    WaitTime_is_Positive,\n                };\n                const result = {};\n                for (const key in flatData) {\n                    if (typeof flatData[key] === 'number') {\n                        result[key] = flatData[key].toFixed(2);\n                    }\n                    else {\n                        result[key] = flatData[key];\n                    }\n                }\n                return result;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        // public getPatientTrends = async (reqData: typings.GenericReqObjI): Promise<object> => {\n        //   try {\n        //     // Destructure request parameters\n        //     const { time_span_id, month_id, facility_location_ids, case_type_ids, speciality_ids, provider_ids, fromDate, toDate }: GlobalFiltersRequest[\"user\"] = reqData;\n        //     let fromdate: Date | string = fromDate;\n        //     let todate: Date | string = toDate;\n        //     let prevTime: string;\n        //     let time: string;\n        //     let whereClause: string = '';\n        //     let createCurTime: string;\n        //     let createPreTime: string;\n        //     let daysDifference: string;\n        //     let internalPreWhereClause: string;\n        //     let internalCurWhereClause: string;\n        //     let externalCreateCurTime: string;\n        //     let externalCreatePreTime: string;\n        //     // Handle time span filtering\n        //     if (time_span_id) {\n        //       switch (time_span_id) {\n        //         // Set time values based on time_span_id\n        //         case 1:\n        //           time = '1 week'\n        //           prevTime = '2 week'\n        //           break;\n        //         case 2:\n        //           time = '1 month';\n        //           prevTime = '2 month';\n        //           break;\n        //         case 3:\n        //           time = '6 month';\n        //           prevTime = '12 month';\n        //           break;\n        //         case 4:\n        //           time = '1 year';\n        //           prevTime = '2 year'\n        //           break;\n        //         case 5:\n        //           // Set time values based on current date for 5 days\n        //           const currentDate: Date = new Date();\n        //           let totalCurrentDate: number = currentDate.getDate();\n        //           time = totalCurrentDate + ' days';\n        //           prevTime = (2 * totalCurrentDate) + ' days';\n        //           break;\n        //         default:\n        //           time = '1 week';\n        //           prevTime = '2 week'\n        //           break;\n        //       }\n        //       externalCreateCurTime = `created_at >= (current_date - INTERVAL '${time}') AND created_at < current_date`;\n        //       externalCreatePreTime = ` created_at >= (current_date - INTERVAL '${prevTime}') AND created_at < (current_date - INTERVAL '${time}')`;\n        //       internalCurWhereClause = `WHERE created_at <= current_date - INTERVAL '${time}'`\n        //       internalPreWhereClause = `WHERE created_at <= current_date - INTERVAL '${prevTime}'`\n        //       createCurTime = ` created_at >= (current_date - INTERVAL '${time}') AND created_at < current_date`;\n        //       createPreTime = `created_at >= (current_date - INTERVAL '${prevTime}') AND created_at < (current_date - INTERVAL '${time}')`;\n        //     }\n        //     // Handle facility location filtering\n        //     if (facility_location_ids && facility_location_ids.length > 0) {\n        //       const quotedfacility_location_ids = facility_location_ids.map(id => `'${id}'`).join(', ');\n        //       whereClause += ` AND facility_location_id IN (${quotedfacility_location_ids}) `;\n        //     }\n        //     if (speciality_ids && speciality_ids.length > 0) {\n        //       // Create quoted speciality_ids for SQL query\n        //       const quotedSpecialityIds = speciality_ids.map(id => `${id}`).join(', ');\n        //       whereClause += ` AND speciality_id IN (${quotedSpecialityIds})`;\n        //     }\n        //     // Check if provider_ids exist\n        //     if (provider_ids && provider_ids.length > 0) {\n        //       const quotedprovider_ids = provider_ids.map(id => `'${id}'`).join(', ');\n        //       whereClause += ` AND provider_id IN (${quotedprovider_ids})`;\n        //     }\n        //     if (case_type_ids && case_type_ids.length > 0) {\n        //       const quotedcase_type_ids = case_type_ids.map(id => `${id}`).join(', ');\n        //       whereClause += ` AND case_type_id IN (${quotedcase_type_ids}) `;\n        //     }\n        //     // Handle date range filtering\n        //     if (fromDate && toDate) {\n        //       const fromdateObj: Date = new Date(fromDate);\n        //       const todateObj: Date = new Date(toDate);\n        //       const dateDifferenceMilliseconds = todateObj.getTime() - fromdateObj.getTime(); // Calculate the difference in milliseconds\n        //       daysDifference = (dateDifferenceMilliseconds / (1000 * 60 * 60 * 24)) + ' days'; // Convert milliseconds to days\n        //       internalCurWhereClause = `WHERE created_at <= ('${fromDate}'::DATE) `;\n        //       internalPreWhereClause = `WHERE created_at <= ('${fromDate}'::DATE) - INTERVAL '${daysDifference}'`;\n        //       externalCreateCurTime = ` created_at >= ('${toDate}'::DATE - INTERVAL '${daysDifference}') AND created_at < '${toDate}'::DATE`;\n        //       externalCreatePreTime = ` created_at >= ('${fromDate}'::DATE - INTERVAL '${daysDifference}') AND created_at <= '${fromDate}'::DATE`;\n        //       createCurTime = ` created_at >= '${fromDate}'::DATE AND created_at < '${toDate}'::DATE`;\n        //       createPreTime = ` created_at >= ('${fromDate}'::DATE - INTERVAL '${daysDifference}') AND created_at <= '${fromDate}'::DATE`;\n        //     }\n        //     // Handle month filtering\n        //     if (month_id && month_id != 0) {\n        //       const currentDate = new Date();\n        //       const currentYear = currentDate.getFullYear();\n        //       // Calculate the total days and start/end dates for the specified month\n        //       const daysinMonth = this.daysInMonth(currentYear, month_id);\n        //       fromdate = this.formatDateToYYYYMMDD(daysinMonth.startDate);\n        //       todate = this.formatDateToYYYYMMDD(daysinMonth.endDate);\n        //       daysDifference = daysinMonth.totalDays + ' days';\n        //       internalCurWhereClause = `WHERE created_at <= ('${fromdate}'::DATE) `;\n        //       internalPreWhereClause = `WHERE created_at <= ('${fromdate}'::DATE) - INTERVAL '${daysDifference}'`;\n        //       externalCreateCurTime = ` created_at >= ('${todate}'::DATE - INTERVAL '${daysDifference}') AND created_at < '${todate}'::DATE`;\n        //       externalCreatePreTime = ` created_at >= ('${fromdate}'::DATE - INTERVAL '${daysDifference}') AND created_at <= '${fromdate}'::DATE`;\n        //       createCurTime = ` created_at >= '${fromdate}'::DATE AND created_at < '${todate}'::DATE`;\n        //       createPreTime = ` created_at >= ('${fromdate}'::DATE - INTERVAL '${daysDifference}') AND created_at <= '${fromdate}'::DATE`;\n        //     }\n        //     const query = `\n        //   SELECT\n        //         (SELECT COUNT(*) FROM patient_dim WHERE ${createCurTime} ${whereClause} ) AS newpatients,\n        //         (SELECT COUNT(*) FROM patient_dim WHERE ${createPreTime} ${whereClause}) AS previouspatients,\n        //         (SELECT COUNT(DISTINCT patient_id) FROM case_fact_new WHERE patient_id IN (SELECT DISTINCT patient_id FROM case_fact_new ${internalCurWhereClause} ) AND ${externalCreateCurTime} ${whereClause})  AS returning_patients_current,\n        //         (SELECT COUNT(DISTINCT patient_id) FROM case_fact_new WHERE patient_id IN (SELECT DISTINCT patient_id FROM case_fact_new ${internalPreWhereClause} ) AND   ${externalCreatePreTime} ${whereClause} )  AS returning_patients_previous,\n        //         (SELECT COUNT(*) FROM case_fact_new WHERE ${createCurTime} ${whereClause}) AS new_cases,\n        //         (SELECT COUNT(*) FROM case_fact_new WHERE   ${createPreTime} ${whereClause})  AS previous_cases;`\n        //     // Extract data from the query result\n        //     console.log(query)\n        //     const info = await sequelize.query(query, { type: Sequelize.QueryTypes.SELECT });\n        //     const queryData = info[0];\n        //     // Function to replace null with zero in query results\n        //     const replaceNullIntegerWithZero = (value) => (value === null ? 0 : parseInt(value));\n        //     const returningPatientsCurrent: number = replaceNullIntegerWithZero(queryData['returning_patients_current']);\n        //     const returningPatientsPrevious: number = replaceNullIntegerWithZero(queryData['returning_patients_previous']);\n        //     const newPatients = replaceNullIntegerWithZero(queryData['newpatients']);\n        //     const previousPatients = replaceNullIntegerWithZero(queryData['previouspatients']);\n        //     //changes to be made (this data is not coming from database (query incorrect))\n        //     const newCases = replaceNullIntegerWithZero(queryData['new_cases']);\n        //     const previousCases = replaceNullIntegerWithZero(queryData['previous_cases']);\n        //     // Calculate percentage changes and positivity for each metric\n        //     const newPatientChanged = previousPatients !== 0\n        //       ? parseFloat((((newPatients - previousPatients) / previousPatients) * 100).toFixed(2))\n        //       : 0;\n        //     const newPatientIsPositive = newPatientChanged >= 0;\n        //     const returningPatientsChanged = returningPatientsPrevious !== 0\n        //       ? parseFloat((((returningPatientsCurrent - returningPatientsPrevious) / returningPatientsPrevious) * 100).toFixed(2))\n        //       : 0;\n        //     const returningPatientsIsPositive = returningPatientsChanged >= 0;\n        //     const newCasesChanged = previousCases !== 0\n        //       ? parseFloat((((newCases - previousCases) / previousCases) * 100).toFixed(2))\n        //       : 0;\n        //     const newCasesIsPositive = newCasesChanged >= 0;\n        //     // Create a flat data object for the response\n        //     const flatData: typings.PatientResponseObject = {\n        //       newPatients,\n        //       newPateintsPrevious: previousPatients,\n        //       newPatientChanged: newPatientChanged === Infinity ? 0 : Math.abs(newPatientChanged),\n        //       newPatientIsPositive,\n        //       returningPatients: returningPatientsCurrent,\n        //       returningPateintsPrevious: returningPatientsPrevious,\n        //       returningPatientsChanged: returningPatientsChanged === Infinity ? 0 : Math.abs(returningPatientsChanged),\n        //       returningPatientsIsPositive,\n        //       newCases,\n        //       previousCases,\n        //       newCasesChanged: newCasesChanged === Infinity ? 0 : Math.abs(newCasesChanged),\n        //       newCasesIsPositive,\n        //     };\n        //     return flatData;\n        //   }\n        //   catch (error) {\n        //     throw error;\n        //   }\n        // }\n        this.getPatientTrends = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Destructure request parameters\n                const { time_span_id, month_id, facility_location_ids, case_type_ids, speciality_ids, provider_ids, fromDate, toDate } = reqData;\n                let fromdate = fromDate;\n                let todate = toDate;\n                let prevTime;\n                let time;\n                let whereClause = '';\n                let createCurTime;\n                let createPreTime;\n                let daysDifference;\n                let internalPreWhereClause;\n                let internalCurWhereClause;\n                let externalCreateCurTime;\n                let externalCreatePreTime;\n                // Handle time span filtering\n                if (time_span_id) {\n                    switch (time_span_id) {\n                        case 1:\n                            time = '1 week';\n                            prevTime = '2 week';\n                            break;\n                        case 2:\n                            time = '1 month';\n                            prevTime = '2 month';\n                            break;\n                        case 3:\n                            time = '6 month';\n                            prevTime = '12 month';\n                            break;\n                        case 4:\n                            time = '1 year';\n                            prevTime = '2 year';\n                            break;\n                        case 5:\n                            const currentDate = new Date();\n                            let totalCurrentDate = currentDate.getDate();\n                            time = totalCurrentDate + ' days';\n                            prevTime = (2 * totalCurrentDate) + ' days';\n                            break;\n                        default:\n                            time = '1 week';\n                            prevTime = '2 week';\n                            break;\n                    }\n                    externalCreateCurTime = `created_at >= (current_date - INTERVAL '${time}') AND created_at < current_date`;\n                    externalCreatePreTime = ` created_at >= (current_date - INTERVAL '${prevTime}') AND created_at < (current_date - INTERVAL '${time}')`;\n                    internalCurWhereClause = `WHERE created_at <= current_date - INTERVAL '${time}'`;\n                    internalPreWhereClause = `WHERE created_at <= current_date - INTERVAL '${prevTime}'`;\n                    createCurTime = ` created_at >= (current_date - INTERVAL '${time}') AND created_at < current_date`;\n                    createPreTime = `created_at >= (current_date - INTERVAL '${prevTime}') AND created_at < (current_date - INTERVAL '${time}')`;\n                }\n                // Handle facility location filtering\n                if (facility_location_ids && facility_location_ids.length > 0) {\n                    const quotedfacility_location_ids = facility_location_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND facility_location_id IN (${quotedfacility_location_ids}) `;\n                }\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `${id}`).join(', ');\n                    whereClause += ` AND speciality_id IN (${quotedSpecialityIds})`;\n                }\n                if (provider_ids && provider_ids.length > 0) {\n                    const quotedprovider_ids = provider_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND provider_id IN (${quotedprovider_ids})`;\n                }\n                if (case_type_ids && case_type_ids.length > 0) {\n                    const quotedcase_type_ids = case_type_ids.map(id => `${id}`).join(', ');\n                    whereClause += ` AND case_type_id IN (${quotedcase_type_ids}) `;\n                }\n                // Handle date range filtering\n                if (fromDate && toDate) {\n                    const fromdateObj = new Date(fromDate);\n                    const todateObj = new Date(toDate);\n                    const dateDifferenceMilliseconds = todateObj.getTime() - fromdateObj.getTime(); // Calculate the difference in milliseconds\n                    daysDifference = (dateDifferenceMilliseconds / (1000 * 60 * 60 * 24)) + ' days'; // Convert milliseconds to days\n                    internalCurWhereClause = `WHERE created_at <= ('${fromDate}'::DATE) `;\n                    internalPreWhereClause = `WHERE created_at <= ('${fromDate}'::DATE) - INTERVAL '${daysDifference}'`;\n                    externalCreateCurTime = ` created_at >= ('${toDate}'::DATE - INTERVAL '${daysDifference}') AND created_at < '${toDate}'::DATE`;\n                    externalCreatePreTime = ` created_at >= ('${fromDate}'::DATE - INTERVAL '${daysDifference}') AND created_at <= '${fromDate}'::DATE`;\n                    createCurTime = ` created_at >= '${fromDate}'::DATE AND created_at < '${toDate}'::DATE`;\n                    createPreTime = ` created_at >= ('${fromDate}'::DATE - INTERVAL '${daysDifference}') AND created_at <= '${fromDate}'::DATE`;\n                }\n                // Handle month filtering\n                if (month_id && month_id != 0) {\n                    const currentDate = new Date();\n                    const currentYear = currentDate.getFullYear();\n                    // Calculate the total days and start/end dates for the specified month\n                    const daysinMonth = this.daysInMonth(currentYear, month_id);\n                    fromdate = this.formatDateToYYYYMMDD(daysinMonth.startDate);\n                    todate = this.formatDateToYYYYMMDD(daysinMonth.endDate);\n                    daysDifference = daysinMonth.totalDays + ' days';\n                    internalCurWhereClause = `WHERE created_at <= ('${fromdate}'::DATE) `;\n                    internalPreWhereClause = `WHERE created_at <= ('${fromdate}'::DATE) - INTERVAL '${daysDifference}'`;\n                    externalCreateCurTime = ` created_at >= ('${todate}'::DATE - INTERVAL '${daysDifference}') AND created_at < '${todate}'::DATE`;\n                    externalCreatePreTime = ` created_at >= ('${fromdate}'::DATE - INTERVAL '${daysDifference}') AND created_at <= '${fromdate}'::DATE`;\n                    createCurTime = ` created_at >= '${fromdate}'::DATE AND created_at < '${todate}'::DATE`;\n                    createPreTime = ` created_at >= ('${fromdate}'::DATE - INTERVAL '${daysDifference}') AND created_at <= '${fromdate}'::DATE`;\n                }\n                const query = `\r\n    SELECT\r\n    (SELECT COUNT(*)\r\n FROM patient_dim WHERE ${createCurTime} ${whereClause} ) AS newpatients,\r\n    (SELECT COUNT(*)\r\n FROM patient_dim WHERE ${createPreTime} ${whereClause}) AS previouspatients,\r\n    (SELECT COUNT(DISTINCT patient_id) FROM case_fact_new WHERE patient_id IN (SELECT DISTINCT patient_id FROM case_fact_new ${internalCurWhereClause} ) AND ${externalCreateCurTime} ${whereClause})  AS returning_patients_current,\r\n    (SELECT COUNT(DISTINCT patient_id) FROM case_fact_new WHERE patient_id IN (SELECT DISTINCT patient_id FROM case_fact_new ${internalPreWhereClause} ) AND   ${externalCreatePreTime} ${whereClause} )  AS returning_patients_previous,\r\n    (SELECT COUNT(*)\r\n  FROM case_fact_new WHERE ${createCurTime} ${whereClause}) AS new_cases,\r\n    (SELECT COUNT(*)\r\n FROM case_fact_new WHERE   ${createPreTime} ${whereClause})  AS previous_cases;`;\n                // Extract data from the query result\n                console.log(query);\n                const info = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(query, { type: sequelize__WEBPACK_IMPORTED_MODULE_0__.QueryTypes.SELECT });\n                const queryData = info[0];\n                // Function to replace null with zero in query results\n                const replaceNullIntegerWithZero = (value) => (value === null ? 0 : parseInt(value));\n                const returningPatientsCurrent = replaceNullIntegerWithZero(queryData['returning_patients_current']);\n                const returningPatientsPrevious = replaceNullIntegerWithZero(queryData['returning_patients_previous']);\n                const newPatients = replaceNullIntegerWithZero(queryData['newpatients']);\n                const previousPatients = replaceNullIntegerWithZero(queryData['previouspatients']);\n                //changes to be made (this data is not coming from database (query incorrect))\n                const newCases = replaceNullIntegerWithZero(queryData['new_cases']);\n                const previousCases = replaceNullIntegerWithZero(queryData['previous_cases']);\n                // Calculate percentage changes and positivity for each metric\n                const newPatientChanged = previousPatients !== 0\n                    ? parseFloat((((newPatients - previousPatients) / previousPatients) * 100).toFixed(2))\n                    : 0;\n                const newPatientIsPositive = newPatientChanged >= 0;\n                const returningPatientsChanged = returningPatientsPrevious !== 0\n                    ? parseFloat((((returningPatientsCurrent - returningPatientsPrevious) / returningPatientsPrevious) * 100).toFixed(2))\n                    : 0;\n                const returningPatientsIsPositive = returningPatientsChanged >= 0;\n                const newCasesChanged = previousCases !== 0\n                    ? parseFloat((((newCases - previousCases) / previousCases) * 100).toFixed(2))\n                    : 0;\n                const newCasesIsPositive = newCasesChanged >= 0;\n                // Create a flat data object for the response\n                const flatData = {\n                    newPatients,\n                    newPateintsPrevious: previousPatients,\n                    newPatientChanged: newPatientChanged === Infinity ? 0 : Math.abs(newPatientChanged),\n                    newPatientIsPositive,\n                    returningPatients: returningPatientsCurrent,\n                    returningPateintsPrevious: returningPatientsPrevious,\n                    returningPatientsChanged: returningPatientsChanged === Infinity ? 0 : Math.abs(returningPatientsChanged),\n                    returningPatientsIsPositive,\n                    newCases,\n                    previousCases,\n                    newCasesChanged: newCasesChanged === Infinity ? 0 : Math.abs(newCasesChanged),\n                    newCasesIsPositive,\n                };\n                return flatData;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        // #region Appointment Trend Analysis\n        this.getAppointmentTrends = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Extracting filters from the request body\n                const { time_span_id, month_id, speciality_ids, provider_ids, facility_location_ids, case_type_ids, fromDate, toDate, granularity_type_id, } = reqData;\n                // Initialize the WHERE clause for appointments and the SELECT clause\n                let whereClause = `af.deleted_at IS NULL `; // A default condition to start with\n                let selectClause = `DATE(scheduled_date_time) AS appointment_date`;\n                // If speciality_ids are provided, filter by them in the WHERE clause\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND af.speciality_id IN (${quotedSpecialityIds})`;\n                }\n                // If month_id is provided, filter by the specified month and update the SELECT clause\n                if (month_id) {\n                    const year = (new Date).getFullYear();\n                    whereClause += ` AND EXTRACT('month' from scheduled_date_time) = ${month_id} \r\n                              AND EXTRACT('year' from scheduled_date_time)= ${year}`; // Fetch data of the selected month\n                    selectClause = `DATE(DATE_TRUNC('week',scheduled_date_time)) AS appointment_date`;\n                }\n                // If provider_ids are provided, filter by them in the WHERE clause\n                if (provider_ids && provider_ids.length > 0) {\n                    const quotedProviderIds = provider_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND af.provider_id IN (${quotedProviderIds})`;\n                }\n                // If case_type_ids are provided, filter by them in the WHERE clause\n                if (case_type_ids && case_type_ids.length > 0) {\n                    const quotedCaseTypeIds = case_type_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND af.case_type_id IN (${quotedCaseTypeIds})`;\n                }\n                // If facility_location_ids are provided, filter by them in the WHERE clause\n                if (facility_location_ids && facility_location_ids.length > 0) {\n                    const quotedLocationIds = facility_location_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND af.facility_location_id IN (${quotedLocationIds})`;\n                }\n                // If fromDate and toDate are provided, filter by date range in the WHERE clause\n                if (fromDate && toDate) {\n                    whereClause += ` AND scheduled_date_time >= '${fromDate}' AND scheduled_date_time <= '${toDate}'`;\n                }\n                // If time_span_id is provided, calculate the interval and update the SELECT clause\n                if (time_span_id) {\n                    let interval = '';\n                    switch (time_span_id) {\n                        case 1:\n                            interval = '1 week';\n                            break;\n                        case 2:\n                            interval = '1 month';\n                            selectClause = `DATE(DATE_TRUNC('week',scheduled_date_time)) AS appointment_date`; // Group data by weeks\n                            break;\n                        case 3:\n                            interval = '6 months';\n                            selectClause = `DATE(DATE_TRUNC('month',scheduled_date_time)) AS appointment_date`; // Group data by months\n                            break;\n                        case 4:\n                            interval = '11 months';\n                            selectClause = `DATE(DATE_TRUNC('month',scheduled_date_time)) AS appointment_date`; // Group data by months\n                            break;\n                        case 5:\n                            const currentDate = new Date();\n                            const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n                            const daysDifference = Math.floor((currentDate.getTime() - firstDayOfMonth.getTime()) / (1000 * 60 * 60 * 24));\n                            interval = `${daysDifference} days`; // Extracts days from the start of the month to the current date\n                            selectClause = `DATE(DATE_TRUNC('week',scheduled_date_time)) AS appointment_date`;\n                            break;\n                        default:\n                            interval = '1 week';\n                    }\n                    whereClause += ` AND scheduled_date_time >= current_date - interval '${interval}'\r\n                               AND scheduled_date_time < current_date`;\n                }\n                // If granularity_type_id is provided, update the SELECT clause based on the granularity\n                if (granularity_type_id) {\n                    switch (granularity_type_id) {\n                        case 1:\n                            selectClause = `DATE(scheduled_date_time) AS appointment_date`;\n                            break;\n                        case 2:\n                            selectClause = `DATE(DATE_TRUNC('week',scheduled_date_time)) AS appointment_date`; // Group data by weeks\n                            break;\n                        case 3:\n                            selectClause = `DATE(DATE_TRUNC('month',scheduled_date_time)) AS appointment_date`; // Group data by months\n                            break;\n                        case 4:\n                            selectClause = `DATE(DATE_TRUNC('year',scheduled_date_time)) AS appointment_date`; // Group data by years\n                            break;\n                        default:\n                            selectClause = `DATE(scheduled_date_time) AS appointment_date`;\n                    }\n                }\n                // Construct the SQL query\n                const sqlQuery = `\r\n              WITH Appointments AS (\r\n                SELECT\r\n                  ${selectClause},\r\n                  asd.slug AS appointment_status,\r\n                  CASE WHEN af.cancelled_id::boolean THEN 'Cancelled' ELSE 'Not Cancelled' END AS cancellation_status,\r\n                  sd.name AS specialty_name\r\n                FROM\r\n                  appointment_fact af\r\n                JOIN appointment_status_dim asd ON af.appointment_status_id = asd.appointment_status_id\r\n                JOIN specialities_dim sd ON af.speciality_id = sd.speciality_id\r\n                WHERE\r\n                  ${whereClause}\r\n              )\r\n              SELECT\r\n                appointment_date,\r\n                appointment_status AS Label,\r\n                COUNT(*) AS Count\r\n              FROM\r\n                Appointments\r\n              WHERE\r\n                appointment_status IN ('completed', 'no_show', 're_scheduled','scheduled') AND cancellation_status = 'Not Cancelled'\r\n              GROUP BY\r\n                appointment_date, appointment_status\r\n              UNION ALL\r\n              SELECT\r\n                appointment_date,\r\n                'Cancelled' AS Label,\r\n                COUNT(*) AS Count\r\n              FROM\r\n                Appointments\r\n              WHERE\r\n                cancellation_status = 'Cancelled'\r\n              GROUP BY\r\n                appointment_date\r\n              UNION ALL\r\n              SELECT\r\n                appointment_date,\r\n                'Total Appointments' AS Label,\r\n                COUNT(*) AS Count\r\n              FROM\r\n                Appointments\r\n              GROUP BY\r\n                appointment_date\r\n              ORDER BY\r\n              appointment_date;\r\n            `;\n                const obj = { granular_data: [] };\n                const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']; // Labels for days\n                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // Labels for months\n                const [results] = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(sqlQuery);\n                results.forEach(function (value) {\n                    // Calculating totals for each status\n                    if (!(value.label in obj)) {\n                        obj[value.label] = Number(value.count);\n                    }\n                    else {\n                        obj[value.label] += Number(value.count);\n                    }\n                    let dateLabel = value.appointment_date;\n                    if (time_span_id) {\n                        switch (time_span_id) {\n                            case 1:\n                                let day = new Date(value.appointment_date);\n                                dateLabel = days[day.getDay()]; // Group data by day labels\n                                break;\n                            case 2:\n                                dateLabel = value.appointment_date; // Data is already grouped in weeks\n                                break;\n                            case 3:\n                                let monthSemester = new Date(value.appointment_date);\n                                dateLabel = months[monthSemester.getMonth()]; // Group data by month labels\n                                break;\n                            case 4:\n                                let monthYear = new Date(value.appointment_date);\n                                dateLabel = months[monthYear.getMonth()]; // Group data by month labels\n                                break;\n                            case 5:\n                                dateLabel = value.appointment_date;\n                                break;\n                            default:\n                                let def = new Date(value.appointment_date);\n                                dateLabel = days[def.getDay()];\n                        }\n                    }\n                    if (granularity_type_id) {\n                        if (granularity_type_id == 4) {\n                            let year = new Date(value.appointment_date);\n                            dateLabel = year.getFullYear();\n                        }\n                    }\n                    if (value.label != \"scheduled\") {\n                        const existingDateObj = obj.granular_data.find((dateObj) => dateObj.date_label === dateLabel);\n                        let dateObject;\n                        if (!existingDateObj) {\n                            dateObject = {\n                                date_label: dateLabel,\n                            };\n                            if (value.label === \"Total Appointments\") {\n                                dateObject.Scheduled = Number(value.count);\n                            }\n                            else if (value.label === \"no_show\" || value.label === \"Cancelled\") {\n                                dateObject.Cancelled_Noshows = (dateObject.Cancelled_Noshows || 0) + Number(value.count);\n                            }\n                            else {\n                                dateObject[value.label] = Number(value.count);\n                            }\n                            obj.granular_data.push(dateObject);\n                        }\n                        else {\n                            dateObject = existingDateObj;\n                            if (value.label === \"Total Appointments\") {\n                                dateObject.Scheduled = Number(value.count);\n                            }\n                            else if (value.label === \"no_show\" || value.label === \"Cancelled\") {\n                                dateObject.Cancelled_Noshows = (dateObject.Cancelled_Noshows || 0) + Number(value.count);\n                            }\n                            else {\n                                dateObject[value.label] = Number(value.count);\n                            }\n                        }\n                    }\n                });\n                return obj;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        // #End region\n        // #region Average Gap & Duration\n        this.getGapDuration = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Destructure the input data\n                const { time_span_id, month_id, speciality_ids, provider_ids, facility_location_ids, case_type_ids, fromDate, toDate } = reqData;\n                // Initialize WHERE clauses for bills and appointments\n                let billsWhereClause = `bf.deleted_at IS NULL `; // A default condition to start with\n                let appointmentWhereClause = `af.deleted_at IS NULL `;\n                // If speciality_ids are provided, filter by them in both WHERE clauses\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', ');\n                    billsWhereClause += ` AND bf.speciality_id IN (${quotedSpecialityIds})`;\n                    appointmentWhereClause += ` AND af.speciality_id IN (${quotedSpecialityIds})`;\n                }\n                // If month_id is provided, filter by the specified month in both WHERE clauses\n                if (month_id) {\n                    const year = (new Date).getFullYear();\n                    const create_startDate = new Date(year, month_id - 1, 1);\n                    const create_endDate = new Date(year, month_id - 1, 1);\n                    create_endDate.setMonth(create_startDate.getMonth() + 1);\n                    create_endDate.setDate(create_endDate.getDate() - 1);\n                    const startDate = create_startDate.toISOString().split('T')[0];\n                    const endDate = create_endDate.toISOString().split('T')[0];\n                    billsWhereClause += `AND bf.bill_date >= '${startDate}'::DATE AND bf.bill_date <= '${endDate}'::DATE `;\n                    appointmentWhereClause += `AND scheduled_date_time >= '${startDate}'::DATE AND scheduled_date_time <= '${endDate}'::DATE `;\n                }\n                // If provider_ids are provided, filter by them in both WHERE clauses\n                if (provider_ids && provider_ids.length > 0) {\n                    const quotedProviderIds = provider_ids.map(id => `'${id}'`).join(', ');\n                    billsWhereClause += ` AND bf.doctor_id IN (${quotedProviderIds})`;\n                    appointmentWhereClause += ` AND af.provider_id IN (${quotedProviderIds})`;\n                }\n                // If case_type_ids are provided, filter by them in the WHERE clause\n                if (case_type_ids && case_type_ids.length > 0) {\n                    const quotedCaseTypeIds = case_type_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    billsWhereClause += ` AND bf.case_type_id IN (${quotedCaseTypeIds})`;\n                    appointmentWhereClause += ` AND af.case_type_id IN (${quotedCaseTypeIds})`;\n                }\n                // If facility_location_ids are provided, filter by them in both WHERE clauses\n                if (facility_location_ids && facility_location_ids.length > 0) {\n                    const quotedLocationIds = facility_location_ids.map(id => `'${id}'`).join(', ');\n                    billsWhereClause += ` AND bf.facility_location_id IN (${quotedLocationIds})`;\n                    appointmentWhereClause += ` AND af.facility_location_id IN (${quotedLocationIds})`;\n                }\n                // If fromDate and toDate are provided, filter by date range in both WHERE clauses\n                if (fromDate && toDate) {\n                    billsWhereClause += ` AND bill_date >= '${fromDate}' AND bill_date <= '${toDate}'`;\n                    appointmentWhereClause += ` AND scheduled_date_time >= '${fromDate}' AND scheduled_date_time <= '${toDate}'`;\n                }\n                // If time_span_id is provided, calculate the interval and filter by it in both WHERE clauses\n                if (time_span_id) {\n                    let interval = '';\n                    switch (time_span_id) {\n                        case 1:\n                            interval = '1 week';\n                            break;\n                        case 2:\n                            interval = '1 month';\n                            break;\n                        case 3:\n                            interval = '6 months';\n                            break;\n                        case 4:\n                            interval = '1 year';\n                            break;\n                        case 5:\n                            const currentDate = new Date();\n                            const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n                            const daysDifference = Math.floor((currentDate.getTime() - firstDayOfMonth.getTime()) / (1000 * 60 * 60 * 24));\n                            interval = `${daysDifference} days`;\n                            break;\n                        default:\n                            interval = '1 week';\n                    }\n                    billsWhereClause += ` AND bill_date >= current_date - interval '${interval}'\r\n                         AND bill_date < current_date`;\n                    appointmentWhereClause += ` AND scheduled_date_time >= current_date - interval '${interval}'\r\n                         AND scheduled_date_time < current_date`;\n                }\n                // Construct the SQL query\n                const sqlQuery = `\r\n              WITH AppointmentDurations AS (\r\n                SELECT\r\n                    ROUND(AVG(EXTRACT(EPOCH FROM (time_of_check_out - time_of_check_in)/60)), 2) AS average_time,\r\n                    ROUND(MIN(EXTRACT(EPOCH FROM (time_of_check_out - time_of_check_in)/60)), 2) AS minimum_time,\r\n                    ROUND(MAX(EXTRACT(EPOCH FROM (time_of_check_out - time_of_check_in)/60)), 2) AS maximum_time\r\n                FROM\r\n                    appointment_fact af\r\n                WHERE ${appointmentWhereClause}\r\n              ),\r\n              BillVisitDurations AS (\r\n                SELECT\r\n                    bf.bill_id,\r\n                    (bf.bill_date - vf.visit_date)::integer AS gap_days\r\n                FROM\r\n                    bills_fact_new bf\r\n                    JOIN bills_visit_dim bvd ON bf.bill_id = bvd.bill_id\r\n                    JOIN visits_fact vf ON bvd.bill_visit_session_id = vf.visit_id\r\n                WHERE ${billsWhereClause}\r\n              )\r\n              SELECT\r\n                  (SELECT average_time FROM AppointmentDurations) AS average_duration_time,\r\n                  (SELECT minimum_time FROM AppointmentDurations) AS minimum_duration_time,\r\n                  (SELECT maximum_time FROM AppointmentDurations) AS maximum_duration_time,\r\n                  ROUND(AVG(gap_days), 0) AS average_gap_days,\r\n                  MIN(gap_days) AS minimum_gap_days,\r\n                  MAX(gap_days) AS maximum_gap_days\r\n              FROM\r\n                  BillVisitDurations;\r\n            `;\n                // Execute the raw query\n                const results = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(sqlQuery);\n                return results[0];\n            }\n            catch (error) {\n                // Handle any errors and log them\n                throw error;\n            }\n        });\n        // #End region\n        //#region  \"Visit_Status_Analysis\"\n        this.getVisitStatus = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { case_type_ids, time_span_id, month_id, speciality_ids, provider_ids, facility_location_ids, fromDate, toDate,\n                //  granularity_type_id,\n                 } = reqData;\n                let whereClause = `deleted_at IS NULL `;\n                let selectClause = `DATE(visit_date) AS Visit_date`;\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND speciality_id IN (${quotedSpecialityIds})`;\n                }\n                if (month_id) {\n                    const year = (new Date).getFullYear();\n                    whereClause += `AND EXTRACT('month' from visit_date) = ${month_id}\r\n        AND EXTRACT('year' from visit_date)= ${year}`; // fetches data of selected month\n                    selectClause = `DATE(DATE_TRUNC('week',visit_date)) AS Visit_date`;\n                }\n                if (provider_ids && provider_ids.length > 0) {\n                    const quotedProviderIds = provider_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND provider_id IN (${quotedProviderIds})`;\n                }\n                if (case_type_ids && case_type_ids.length > 0) {\n                    const quotedCasetypeIds = case_type_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND provider_id IN (${quotedCasetypeIds})`;\n                }\n                if (facility_location_ids && facility_location_ids.length > 0) {\n                    const quotedLocationIds = facility_location_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND facility_location_id IN (${quotedLocationIds})`;\n                }\n                if (fromDate && toDate) {\n                    whereClause += ` AND visit_date >= '${fromDate}' AND visit_date <= '${toDate}'`;\n                }\n                if (time_span_id) {\n                    let interval = '';\n                    switch (time_span_id) {\n                        case 1:\n                            interval = '1 week';\n                            break;\n                        case 2:\n                            interval = '1 month';\n                            selectClause = `DATE(DATE_TRUNC('week',visit_date)) AS Visit_date`;\n                            break;\n                        case 3:\n                            interval = '6 months';\n                            selectClause = `DATE(DATE_TRUNC('month',visit_date)) AS Visit_date`; //GroupBy data by months\n                            break;\n                        case 4:\n                            interval = '1 year';\n                            selectClause = `DATE(DATE_TRUNC('month',visit_date)) AS Visit_date`; //GroupBy data by months\n                            break;\n                        case 5:\n                            const currentDate = new Date();\n                            const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n                            const daysDifference = Math.floor((currentDate.getTime() - firstDayOfMonth.getTime()) / (1000 * 60 * 60 * 24));\n                            interval = `${daysDifference} days`; // extracts days from start of month to cuurent date\n                            selectClause = `DATE(DATE_TRUNC('week',visit_date)) AS Visit_date`;\n                            break;\n                        default:\n                            interval = '1 week';\n                    }\n                    whereClause += ` AND visit_date >= current_date - interval '${interval}'\r\n                AND visit_date < current_date`;\n                }\n                const visit_status_query = `\r\n        WITH visits AS (\r\n        SELECT\r\n            ${selectClause},\r\n            CASE\r\n                WHEN visit_session_state_id = 1 THEN 'un_finalized'\r\n                WHEN visit_session_state_id = 2 THEN 'finalized'\r\n                WHEN visit_session_state_id = 3 THEN 'bill_created'\r\n            END AS label\r\n        FROM visits_fact\r\n        WHERE ${whereClause}\r\n    )\r\n    SELECT Visit_date, label, COUNT(*) AS count\r\n    FROM visits\r\n    GROUP BY Visit_date, label\r\n    ORDER BY Visit_date, label;\r\n        `;\n                console.log(visit_status_query, 'vissiiiittttt');\n                let Output = [];\n                const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n                const [results] = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(visit_status_query);\n                //const results = one_more[0]\n                results.forEach(function (value) {\n                    let dateLabel = value.visit_date;\n                    let label = value.label;\n                    let count = Number(value.count);\n                    if (time_span_id) {\n                        switch (time_span_id) {\n                            case 1:\n                                let day = new Date(value.visit_date);\n                                dateLabel = days[day.getDay()]; //GroupBy data by day labels\n                                break;\n                            case 2:\n                                dateLabel = value.visit_date; //Data is already grouped in weeks\n                                break;\n                            case 3:\n                                let monthSemester = new Date(value.visit_date);\n                                dateLabel = months[monthSemester.getMonth()]; //GroupBy data by month labels\n                                break;\n                            case 4:\n                                let monthYear = new Date(value.visit_date);\n                                dateLabel = months[monthYear.getMonth()]; //GroupBy data by month labels\n                                break;\n                            default:\n                                let def = new Date(value.visit_date);\n                                dateLabel = days[def.getDay()];\n                        }\n                    }\n                    const existingDateObj = Output.find((dateObj) => dateObj.date_label === dateLabel);\n                    if (!existingDateObj) {\n                        Output.push({\n                            Visit_Timeline: dateLabel,\n                            [label]: count,\n                        });\n                    }\n                    else {\n                        existingDateObj[label] = count;\n                    }\n                });\n                const finaloutput = Output;\n                const transformedOutput = finaloutput.reduce((result, item) => {\n                    const { Visit_Timeline } = item, rest = __rest(item, [\"Visit_Timeline\"]);\n                    const existingEntry = result.find((entry) => entry.Visit_Timeline === Visit_Timeline);\n                    if (existingEntry) {\n                        Object.assign(existingEntry, rest);\n                    }\n                    else {\n                        result.push(Object.assign({ Visit_Timeline }, rest));\n                    }\n                    return result;\n                }, []);\n                return transformedOutput;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        // public getBillStatus = async (reqData: typings.GenericReqObjI): Promise<object> => {\n        //   try {\n        //     const {\n        //       case_type_ids,\n        //       // time_span_id,\n        //       // month_id,\n        //       speciality_ids,\n        //       provider_ids,\n        //       facility_location_ids,\n        //       // fromDate,\n        //       // toDate,\n        //       granularity_type_id,\n        //     }: GlobalFiltersRequest[\"user\"] = reqData;\n        //     let whereClause: string = `vf.deleted_at IS NULL `;\n        //     let selectClause: string = `DATE(visit_date) AS Visit_date`;\n        //     if (speciality_ids && speciality_ids.length > 0) {\n        //       const quotedSpecialityIds: string = speciality_ids.map(id => `'${id}'`).join(', ');\n        //       whereClause += ` AND speciality_id IN (${quotedSpecialityIds})`;\n        //     }\n        //     // if (month_id) {\n        //     //   const year: number = (new Date).getFullYear();\n        //     //   whereClause += `AND EXTRACT('month' from visit_date) = ${month_id}\n        //     // AND EXTRACT('year' from visit_date)= ${year}`; // fetches data of selected month\n        //     //   selectClause = `DATE(DATE_TRUNC('week',visit_date)) AS Visit_date`\n        //     // }\n        //     if (provider_ids && provider_ids.length > 0) {\n        //       const quotedProviderIds: string = provider_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n        //       whereClause += ` AND provider_id IN (${quotedProviderIds})`;\n        //     }\n        //     if (case_type_ids && case_type_ids.length > 0) {\n        //       const quotedCasetypeIds: string = case_type_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n        //       whereClause += ` AND provider_id IN (${quotedCasetypeIds})`;\n        //     }\n        //     if (facility_location_ids && facility_location_ids.length > 0) {\n        //       const quotedLocationIds: string = facility_location_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n        //       whereClause += ` AND facility_location_id IN (${quotedLocationIds})`;\n        //     }\n        //     // if (fromDate && toDate) {\n        //     //   whereClause += ` AND vf.visit_date >= '${fromDate}' AND vf.visit_date <= '${toDate} '`;\n        //     // }\n        //     // if (time_span_id) {\n        //     //   let interval: string = '';\n        //     //   switch (time_span_id) {\n        //     //     case 1:\n        //     //       interval = '1 week';\n        //     //       break;\n        //     //     case 2:\n        //     //       interval = '1 month';\n        //     //       selectClause = `DATE(DATE_TRUNC('week',visit_date)) AS Visit_date`\n        //     //       break;\n        //     //     case 3:\n        //     //       interval = '6 months';\n        //     //       selectClause = `DATE(DATE_TRUNC('month',visit_date)) AS Visit_date` //GroupBy data by months\n        //     //       break;\n        //     //     case 4:\n        //     //       interval = '1 year';\n        //     //       selectClause = `DATE(vf.visit_date) AS Visit_date` //GroupBy data by months\n        //     //       break;\n        //     //     case 5:\n        //     //       const currentDate: Date = new Date();\n        //     //       const firstDayOfMonth: Date = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n        //     //       const daysDifference: number = Math.floor((currentDate.getTime() - firstDayOfMonth.getTime()) / (1000 * 60 * 60 * 24));\n        //     //       interval = `${daysDifference} days`; // extracts days from start of month to cuurent date\n        //     //       selectClause = `DATE(DATE_TRUNC('week',visit_date)) AS Visit_date`\n        //     //       break;\n        //     //     default:\n        //     //       interval = '1 year';\n        //     //   }\n        //     //   whereClause += ` AND visit_date >= current_date - interval '${interval}'\n        //     //           AND visit_date < current_date`;\n        //     // }\n        //     const bill_status_Query: string = `\n        //     SELECT\n        //     ${selectClause},\n        //     vf.visit_date AS Visit_date,\n        //     COUNT(*) AS unfinalized_visit,\n        //     current_date - vf.visit_date AS date_difference\n        // FROM\n        //     visits_fact AS vf\n        // LEFT JOIN\n        //     visit_session_state_dim AS vssd ON vf.visit_session_state_id = CAST(vssd.visit_session_state_id as integer)\n        // WHERE\n        // ${whereClause}\n        // GROUP BY\n        //     vf.visit_date\n        // ORDER BY\n        //     date_difference;\n        //       `;\n        //     const [results] = await sequelize.query(bill_status_Query);\n        //     return results;\n        //   } catch (error) {\n        //     throw error\n        //   }\n        // }\n        this.getBillStatus = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { case_type_ids, month_id, speciality_ids, provider_ids, fromDate, toDate, time_span_id } = reqData;\n                let whereClause = `vf.deleted_at IS NULL`;\n                if (provider_ids.length === 1) {\n                    whereClause = `vf.deleted_at IS NULL AND provider_id = ${provider_ids} `;\n                }\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND speciality_id IN (${quotedSpecialityIds})`;\n                }\n                if (month_id) {\n                    const year = (new Date).getFullYear();\n                    whereClause += ` AND EXTRACT('month' from vf.visit_date) = ${month_id} \r\n                              AND EXTRACT('year' from vf.visit_date)= ${year}`; // Fetch data of the selected month\n                }\n                if (case_type_ids && case_type_ids.length > 0) {\n                    const quotedCasetypeIds = case_type_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND case_type_id IN (${quotedCasetypeIds})`;\n                }\n                if (fromDate && toDate) {\n                    whereClause += ` AND vf.visit_date >= '${fromDate}' AND vf.visit_date <= '${toDate}'`;\n                }\n                // If time_span_id is provided, calculate the interval and update the SELECT clause\n                if (time_span_id) {\n                    let interval = '';\n                    switch (time_span_id) {\n                        case 1:\n                            interval = '1 week';\n                            break;\n                        case 2:\n                            interval = '1 month';\n                            break;\n                        case 3:\n                            interval = '6 months';\n                            break;\n                        case 4:\n                            interval = '11 months';\n                            break;\n                        case 5:\n                            const currentDate = new Date();\n                            const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n                            const daysDifference = Math.floor((currentDate.getTime() - firstDayOfMonth.getTime()) / (1000 * 60 * 60 * 24));\n                            interval = `${daysDifference} days`; // Extracts days from the start of the month to the current date\n                            break;\n                        default:\n                            interval = '1 week';\n                    }\n                    whereClause += ` AND vf.visit_date >= current_date - interval '${interval}'\r\n                               AND vf.visit_date < current_date`;\n                }\n                const bill_status_Query = `\r\n            SELECT\r\n            COUNT(*) AS unfinalized_visit,\r\n            current_date - vf.visit_date AS date_difference\r\n            FROM\r\n                visits_fact AS vf\r\n            LEFT JOIN\r\n                visit_session_state_dim AS vssd ON vf.visit_session_state_id = CAST(vssd.visit_session_state_id as integer)\r\n            WHERE\r\n            ${whereClause}\r\n            GROUP BY\r\n                date_difference\r\n            ORDER BY\r\n                date_difference;\r\n            `;\n                const [results] = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(bill_status_Query);\n                return results;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        //#endregion\n        //#region  Percentage of denials against each denial type\n        this.getDenialTypesService = (reqData, _authorization) => __awaiter(this, void 0, void 0, function* () {\n            let dropdownQuery = false;\n            let labels = [];\n            let labelVals = [];\n            let labelPercentage = [];\n            let pushANDConditions = [];\n            let pushANDConditionsDropdowns = ['dm.denial_id::integer = dt.denial_id::integer'];\n            const oneWeek = `dt.created_at >=(CURRENT_DATE - INTERVAL '1 week')`;\n            const oneMonth = `(dt.created_at >= CURRENT_DATE - INTERVAL '1 month')`;\n            const sixMonths = `(CURRENT_DATE - INTERVAL '6 months' <= dt.created_at)`;\n            const oneYear = `(CURRENT_DATE - INTERVAL '1 year') <= dt.created_at`;\n            const MTD = `(dt.created_at >= DATE_TRUNC('month', CURRENT_DATE) AND dt.created_at <= CURRENT_DATE)`;\n            const specificMonth = `EXTRACT(YEAR FROM dt.created_at) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM dt.created_at) = `;\n            const { time_span_id, month_id, speciality_ids, provider_ids, facility_location_ids, case_type_ids, fromDate, toDate, granularity_type_id } = reqData;\n            ///////   request object with time_span_id enums { 1, 2, 3, 4, 5}\n            if (time_span_id && (time_span_id != 0)) {\n                switch (time_span_id) {\n                    case 1:\n                        pushANDConditions.push(`${oneWeek}`);\n                        break;\n                    case 2:\n                        pushANDConditions.push(`${oneMonth}`);\n                        break;\n                    case 3:\n                        pushANDConditions.push(`${sixMonths}`);\n                        break;\n                    case 4:\n                        pushANDConditions.push(`${oneYear}`);\n                        break;\n                    case 5:\n                        pushANDConditions.push(`${MTD}`);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            ///////   request object with month_id enums { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}\n            if (month_id && (month_id != 0)) {\n                pushANDConditions.push(`${specificMonth}${month_id}`);\n            }\n            ///////   request object with speciality_ids array of integers\n            if (speciality_ids && speciality_ids.length > 0) {\n                dropdownQuery = true;\n                const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                pushANDConditionsDropdowns.push(`bf.speciality_id IN (${quotedSpecialityIds})`);\n            }\n            ///////   request object with provider_ids array of integers\n            if (provider_ids && provider_ids.length > 0) {\n                dropdownQuery = true;\n                const quotedProviderIds = provider_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                pushANDConditionsDropdowns.push(`bf.doctor_id::integer IN (${quotedProviderIds})`);\n            }\n            ///////   request object with facility_location_ids array of integers\n            if (facility_location_ids && facility_location_ids.length > 0) {\n                dropdownQuery = true;\n                const quotedLocationIds = facility_location_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                pushANDConditionsDropdowns.push(`bf.facility_location_id::integer IN (${quotedLocationIds})`);\n            }\n            ///////   request object with case_type_ids array of integers\n            if (case_type_ids && case_type_ids.length > 0) {\n                dropdownQuery = true;\n                const quotedCaseTypeIds = case_type_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                pushANDConditionsDropdowns.push(`bf.case_type_id IN (${quotedCaseTypeIds})`);\n            }\n            ///////   request object with facility_location_ids array of integers\n            if (facility_location_ids && facility_location_ids.length > 0) {\n                dropdownQuery = true;\n                const quotedLocationIds = facility_location_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                pushANDConditionsDropdowns.push(`bf.facility_location_id IN (${quotedLocationIds})`);\n            }\n            ///////   request object with case_type_ids array of integers\n            if (case_type_ids && case_type_ids.length > 0) {\n                dropdownQuery = true;\n                const quotedCaseTypeIds = case_type_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                pushANDConditionsDropdowns.push(`bf.case_type_id IN (${quotedCaseTypeIds})`);\n            }\n            ///////   request object with fromDate for starting date of fetching data\n            if (fromDate) {\n                pushANDConditions.push(`dt.created_at >= '${fromDate}'`);\n            }\n            ///////   request object with toDate for ending date of fetching data\n            if (toDate) {\n                pushANDConditions.push(`dt.created_at <='${toDate}'`);\n            }\n            ///////   Query\n            let query = `\r\n        WITH partialData AS (\r\n            SELECT\r\n                dt.denial_type_id,\r\n                dt.denial_type_name,\r\n                COUNT(*) AS denial_count\r\n            FROM denial_type_dim AS dt\r\n            WHERE ${pushANDConditions.join(' AND ')}\r\n            GROUP BY dt.denial_type_name, dt.denial_type_id\r\n        )${dropdownQuery ? ` ,\r\n        dropdownFilter AS (\r\n            SELECT DISTINCT dt.denial_type_id\r\n            FROM denial_type_dim AS dt\r\n            WHERE EXISTS (\r\n                SELECT 1\r\n                FROM bills_fact_new AS bf\r\n                JOIN denial_dim AS dm ON dm.bill_id::integer = bf.bill_id::integer\r\n                WHERE  ${pushANDConditionsDropdowns.join(' AND ')}\r\n            )\r\n        )` : ''}\r\n        SELECT\r\n            pd.denial_type_id,\r\n            pd.denial_type_name,\r\n            pd.denial_count,\r\n            (pd.denial_count * 100.0) / SUM(pd.denial_count) OVER() AS denial_percentage\r\n        FROM\r\n            partialData AS pd\r\n            ${dropdownQuery ? `WHERE pd.denial_type_id IN (SELECT denial_type_id FROM dropdownFilter)` : ''}\r\n        ORDER BY pd.denial_count DESC\r\n        LIMIT 10;\r\n        `;\n            ///////   Retrieve data\n            const result = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(query, { type: sequelize__WEBPACK_IMPORTED_MODULE_0__.QueryTypes.SELECT });\n            ///////   Reset condition Arrays\n            dropdownQuery = false;\n            pushANDConditions = [];\n            pushANDConditionsDropdowns = [];\n            ////// Change payload\n            if (result.length != 0) {\n                let sum = 0;\n                result.forEach(entry => {\n                    sum += Number(entry['denial_count']);\n                });\n                result.forEach(entry => {\n                    labelVals.push(entry['denial_count']);\n                    let percentage = (Number(entry['denial_count']) / sum) * 100;\n                    labelPercentage.push(parseFloat(percentage.toFixed(2)));\n                    labels.push(`${entry['denial_type_name']}, ${parseFloat(percentage.toFixed(2))}%`);\n                });\n                const paylaod = {\n                    fullData: result,\n                    labels: labels,\n                    labelVals: labelVals,\n                    labelPercentage: labelPercentage\n                };\n                return paylaod;\n            }\n            else {\n                const paylaod = {\n                    fullData: [],\n                    labels: [],\n                    labelVals: [],\n                    labelPercentage: []\n                };\n                return paylaod;\n            }\n        });\n        this.__http = new http();\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/services/practice.manager.service.ts?");

/***/ }),

/***/ "./src/services/provider.service.ts":
/*!******************************************!*\
  !*** ./src/services/provider.service.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProviderService: () => (/* binding */ ProviderService)\n/* harmony export */ });\n/* harmony import */ var sequelize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sequelize */ \"sequelize\");\n/* harmony import */ var sequelize__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sequelize__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _config_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/database */ \"./src/config/database.ts\");\n/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared */ \"./src/shared/index.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nclass ProviderService extends _shared__WEBPACK_IMPORTED_MODULE_2__.Helper {\n    constructor(http) {\n        super();\n        this.http = http;\n        this.getAppointments = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Extracting filters from the request body\n                const { time_span_id, provider_ids, case_type_ids, speciality_ids } = reqData;\n                // Initialize the WHERE clause for appointments and the SELECT clause\n                let whereClause = `af.deleted_at IS NULL`;\n                if (provider_ids.length === 1) {\n                    whereClause = `af.deleted_at IS NULL AND provider_id = ${provider_ids} `;\n                }\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND af.speciality_id IN (${quotedSpecialityIds})`;\n                }\n                if (case_type_ids && case_type_ids.length > 0) {\n                    const quotedCaseTypeIds = case_type_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND af.case_type_id IN (${quotedCaseTypeIds})`;\n                }\n                // If time_span_id is provided, calculate the interval and update the SELECT clause\n                if (time_span_id) {\n                    let interval = '';\n                    switch (time_span_id) {\n                        case 1:\n                            interval = '1 week';\n                            break;\n                        case 2:\n                            interval = '1 month';\n                            break;\n                        default:\n                            interval = '1 week';\n                    }\n                    whereClause += ` AND scheduled_date_time::date >= '2023-08-12' ::date + interval '${interval}'`;\n                }\n                // Construct the SQL query\n                const sqlQuery = `\r\n            WITH Appointments AS (\r\n                SELECT\r\n                  DISTINCT scheduled_date_time AS appointment_date,\r\n                  asd.slug AS appointment_status,\r\n                  CASE WHEN af.cancelled_id::boolean THEN 'Cancelled' ELSE 'Not Cancelled' END AS cancellation_status,\r\n\t\t\t\t  CASE WHEN af.confirmation_status_id::boolean THEN 'Confirmed' ELSE 'Not Confimed' END AS confirmation_status,\r\n                  sd.qualifier  AS specialty_name,\r\n\t\t\t\t  pd.first_name || ' ' || pd.last_name AS patient_name,\r\n\t\t\t\t  pd.age AS patient_age,\r\n\t\t\t\t  pd.gender AS patient_gender,\r\n\t\t\t\t  ctd.name AS case_type,\r\n\t\t\t\t  atd.qualifier AS visit_type,\r\n\t\t\t\t  af.case_id AS case_no\r\n                FROM\r\n                  appointment_fact af\r\n                JOIN appointment_status_dim asd ON af.appointment_status_id = asd.appointment_status_id\r\n                JOIN specialities_dim sd ON af.speciality_id = sd.speciality_id\r\n\t\t\t\tJOIN patient_dim pd ON af.patient_id = pd.patient_id\r\n\t\t\t\tJOIN case_types_dim ctd ON af.case_type_id = ctd.case_type_id\r\n\t\t\t\tJOIN appointment_type_dim atd ON af.appointment_type_id = atd.appointment_type_id\r\n                WHERE ${whereClause}\r\n              )\r\n              SELECT\r\n                appointment_date,\r\n                appointment_status,\r\n\t\t\t\tconfirmation_status,\r\n\t\t\t\tcancellation_status,\r\n\t\t\t\tspecialty_name,\r\n\t\t\t\tpatient_name,\r\n\t\t\t\tpatient_age,\r\n\t\t\t\tpatient_gender,\r\n\t\t\t\tcase_type,\r\n\t\t\t\tvisit_type,\r\n\t\t\t\tcase_no\r\n              FROM\r\n                Appointments\r\n              WHERE\r\n                appointment_status IN ('re_scheduled','scheduled') \r\n                `;\n                const [results] = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(sqlQuery);\n                const obj = {\n                    Cancelled: 0,\n                    re_scheduled: 0,\n                    scheduled: 0,\n                    Cancelled_list: [],\n                    re_scheduled_list: [],\n                    scheduled_list: [],\n                };\n                results.forEach(function (value) {\n                    // Calculating totals for each status\n                    if (value.cancellation_status == 'Not Cancelled') {\n                        obj[value.appointment_status] += 1;\n                        if (value.appointment_status == 'scheduled') {\n                            obj.scheduled_list.push(value);\n                        }\n                        else {\n                            obj.re_scheduled_list.push(value);\n                        }\n                    }\n                    else {\n                        obj[value.cancellation_status] += 1;\n                        obj.Cancelled_list.push(value);\n                    }\n                });\n                return obj;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        this.getAppointmentsAnalysis = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Extracting filters from the request body\n                const { time_span_id, month_id, speciality_ids, provider_ids, case_type_ids, fromDate, toDate, granularity_type_id, } = reqData;\n                // Initialize the WHERE clause for appointments and the SELECT clause\n                let whereClause = `af.deleted_at IS NULL`; // A default condition to start with\n                if (provider_ids.length === 1) {\n                    whereClause = `af.deleted_at IS NULL AND af.provider_id = ${provider_ids} `;\n                }\n                let selectClause = `DATE(scheduled_date_time) AS appointment_date`;\n                // If speciality_ids are provided, filter by them in the WHERE clause\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND af.speciality_id IN (${quotedSpecialityIds})`;\n                }\n                // If month_id is provided, filter by the specified month and update the SELECT clause\n                if (month_id) {\n                    const year = (new Date).getFullYear();\n                    whereClause += ` AND EXTRACT('month' from scheduled_date_time) = ${month_id} \r\n                                  AND EXTRACT('year' from scheduled_date_time)= ${year}`; // Fetch data of the selected month\n                    selectClause = `DATE(DATE_TRUNC('week',scheduled_date_time)) AS appointment_date`;\n                }\n                // If case_type_ids are provided, filter by them in the WHERE clause\n                if (case_type_ids && case_type_ids.length > 0) {\n                    const quotedCaseTypeIds = case_type_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND af.case_type_id IN (${quotedCaseTypeIds})`;\n                }\n                // If facility_location_ids are provided, filter by them in the WHERE clause\n                // If fromDate and toDate are provided, filter by date range in the WHERE clause\n                if (fromDate && toDate) {\n                    whereClause += ` AND scheduled_date_time >= '${fromDate}' AND scheduled_date_time <= '${toDate}'`;\n                }\n                // If time_span_id is provided, calculate the interval and update the SELECT clause\n                if (time_span_id) {\n                    let interval = '';\n                    switch (time_span_id) {\n                        case 1:\n                            interval = '1 week';\n                            break;\n                        case 2:\n                            interval = '1 month';\n                            selectClause = `DATE(DATE_TRUNC('week',scheduled_date_time)) AS appointment_date`; // Group data by weeks\n                            break;\n                        case 3:\n                            interval = '6 months';\n                            selectClause = `DATE(DATE_TRUNC('month',scheduled_date_time)) AS appointment_date`; // Group data by months\n                            break;\n                        case 4:\n                            interval = '11 months';\n                            selectClause = `DATE(DATE_TRUNC('month',scheduled_date_time)) AS appointment_date`; // Group data by months\n                            break;\n                        case 5:\n                            const currentDate = new Date();\n                            const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n                            const daysDifference = Math.floor((currentDate.getTime() - firstDayOfMonth.getTime()) / (1000 * 60 * 60 * 24));\n                            interval = `${daysDifference} days`; // Extracts days from the start of the month to the current date\n                            selectClause = `DATE(DATE_TRUNC('week',scheduled_date_time)) AS appointment_date`;\n                            break;\n                        default:\n                            interval = '1 week';\n                    }\n                    whereClause += ` AND scheduled_date_time >= current_date - interval '${interval}'\r\n                                   AND scheduled_date_time < current_date`;\n                }\n                // If granularity_type_id is provided, update the SELECT clause based on the granularity\n                if (granularity_type_id) {\n                    switch (granularity_type_id) {\n                        case 1:\n                            selectClause = `DATE(scheduled_date_time) AS appointment_date`;\n                            break;\n                        case 2:\n                            selectClause = `DATE(DATE_TRUNC('week',scheduled_date_time)) AS appointment_date`; // Group data by weeks\n                            break;\n                        case 3:\n                            selectClause = `DATE(DATE_TRUNC('month',scheduled_date_time)) AS appointment_date`; // Group data by months\n                            break;\n                        case 4:\n                            selectClause = `DATE(DATE_TRUNC('year',scheduled_date_time)) AS appointment_date`; // Group data by years\n                            break;\n                        default:\n                            selectClause = `DATE(scheduled_date_time) AS appointment_date`;\n                    }\n                }\n                // Construct the SQL query\n                const sqlQuery = `\r\n                WITH Appointments AS (\r\n                    SELECT\r\n                    ${selectClause},\r\n                    asd.slug AS appointment_status,\r\n                    atd.slug AS visit_type,\r\n                    CASE WHEN af.cancelled_id::boolean THEN 'Cancelled' ELSE 'Not Cancelled' END AS cancellation_status\r\n                    FROM\r\n                    appointment_fact af\r\n                    JOIN appointment_status_dim asd ON af.appointment_status_id = asd.appointment_status_id\r\n                    JOIN specialities_dim sd ON af.speciality_id = sd.speciality_id\r\n                    JOIN appointment_type_dim atd ON af.appointment_type_id = atd.appointment_type_id\r\n                    WHERE\r\n                    ${whereClause}\r\n                )\r\n                SELECT\r\n                    appointment_date,\r\n                    appointment_status AS Label,\r\n                    COUNT(*) AS Count\r\n                FROM\r\n                    Appointments\r\n                WHERE\r\n                    appointment_status IN ('completed') AND cancellation_status = 'Not Cancelled'\r\n                GROUP BY\r\n                    appointment_date, appointment_status\r\n                UNION ALL\r\n                SELECT\r\n                    appointment_date,\r\n                    visit_type AS Label,\r\n                    COUNT(*) AS Count\r\n                FROM\r\n                    Appointments\r\n                WHERE\r\n                    visit_type IN ('initial_evaluation', 'follow_up','re_evaluation') AND cancellation_status = 'Not Cancelled' AND appointment_status = 'completed'\r\n                GROUP BY\r\n                    appointment_date, visit_type\r\n                UNION ALL\r\n                SELECT\r\n                    appointment_date,\r\n                    'Cancelled' AS Label,\r\n                    COUNT(*) AS Count\r\n                FROM\r\n                    Appointments\r\n                WHERE\r\n                    cancellation_status = 'Cancelled'\r\n                GROUP BY\r\n                    appointment_date\r\n                UNION ALL\r\n                SELECT\r\n                    appointment_date,\r\n                    'Scheduled' AS Label,\r\n                    COUNT(*) AS Count\r\n                FROM\r\n                    Appointments\r\n                GROUP BY\r\n                    appointment_date\r\n                ORDER BY\r\n                appointment_date;\r\n                `;\n                const obj = { granular_data: [] };\n                const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']; // Labels for days\n                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // Labels for months\n                const [results] = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(sqlQuery);\n                results.forEach(function (value) {\n                    // Calculating totals for each status\n                    if (!(value.label in obj)) {\n                        obj[value.label] = Number(value.count);\n                    }\n                    else {\n                        obj[value.label] += Number(value.count);\n                    }\n                    let dateLabel = value.appointment_date; // dateLabel can contain string as Jan, Feb or number as 2023 or Date as it is\n                    if (time_span_id) {\n                        switch (time_span_id) {\n                            case 1:\n                                let day = new Date(value.appointment_date);\n                                dateLabel = days[day.getDay()]; // Group data by day labels\n                                break;\n                            case 2:\n                                dateLabel = value.appointment_date; // Data is already grouped in weeks\n                                break;\n                            case 3:\n                                let monthSemester = new Date(value.appointment_date);\n                                dateLabel = months[monthSemester.getMonth()]; // Group data by month labels\n                                break;\n                            case 4:\n                                let monthYear = new Date(value.appointment_date);\n                                dateLabel = months[monthYear.getMonth()]; // Group data by month labels\n                                break;\n                            case 5:\n                                dateLabel = value.appointment_date;\n                                break;\n                            default:\n                                let def = new Date(value.appointment_date);\n                                dateLabel = days[def.getDay()];\n                        }\n                    }\n                    if (granularity_type_id) {\n                        if (granularity_type_id == 4) {\n                            let year = new Date(value.appointment_date);\n                            dateLabel = year.getFullYear();\n                        }\n                    }\n                    if (value.label != \"Scheduled\" && value.label != \"Cancelled\") {\n                        const existingDateObj = obj.granular_data.find((dateObj) => dateObj.date_label === dateLabel);\n                        let dateObject;\n                        if (!existingDateObj) {\n                            dateObject = {\n                                date_label: dateLabel,\n                            };\n                            dateObject[value.label] = Number(value.count);\n                            obj.granular_data.push(dateObject);\n                        }\n                        else {\n                            dateObject = existingDateObj;\n                            dateObject[value.label] = Number(value.count);\n                        }\n                    }\n                });\n                return obj;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        this.getSummaryChart = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { time_span_id, month_id, facility_location_ids, speciality_ids, case_type_ids, provider_ids, fromDate, toDate } = reqData;\n                let fromdate = fromDate;\n                let todate = toDate;\n                let prevTime;\n                let change;\n                let time;\n                let whereClause = '';\n                let schCurTime;\n                let schPreTime;\n                let visitCurTime;\n                let visitPreTime;\n                let daysDifference;\n                if (time_span_id) {\n                    switch (time_span_id) {\n                        case 1:\n                            time = '1 week';\n                            prevTime = '2 week';\n                            break;\n                        case 2:\n                            time = '1 month';\n                            prevTime = '2 month';\n                            break;\n                        case 3:\n                            time = '6 month';\n                            prevTime = '12 month';\n                            break;\n                        case 4:\n                            time = '1 year';\n                            prevTime = '2 year';\n                            break;\n                        case 5:\n                            const currentDate = new Date();\n                            let totalCurrentDate = currentDate.getDate();\n                            time = totalCurrentDate + ' days';\n                            prevTime = (2 * totalCurrentDate) + ' days';\n                            break;\n                        default:\n                            time = '1 week';\n                            prevTime = '2 week';\n                            break;\n                    }\n                    schCurTime = ` scheduled_date_time >= (current_date - INTERVAL '${time}') AND scheduled_date_time < current_date`;\n                    schPreTime = ` scheduled_date_time >= (current_date - INTERVAL '${prevTime}') AND scheduled_date_time < current_date - INTERVAL '${time}'`;\n                    visitCurTime = ` visit_date >= (current_date - INTERVAL '${time}') AND visit_date < current_date `;\n                    visitPreTime = ` visit_date >= (current_date - INTERVAL '${prevTime}') AND visit_date < (current_date - INTERVAL '${time}')`;\n                }\n                if (facility_location_ids && facility_location_ids.length > 0) {\n                    const quotedfacility_location_ids = facility_location_ids.map(id => `${id}`).join(', ');\n                    whereClause += ` AND facility_location_id IN (${quotedfacility_location_ids}) `;\n                }\n                if (provider_ids && provider_ids.length > 0) {\n                    const quotedfacility_provider_ids = facility_location_ids.map(id => `${id}`).join(', ');\n                    whereClause += `AND provider_id IN (${quotedfacility_provider_ids})`;\n                }\n                if (case_type_ids && case_type_ids.length > 0) {\n                    const quotedcase_type_ids = facility_location_ids.map(id => `${id}`).join(', ');\n                    whereClause += ` AND case_type_id IN (${quotedcase_type_ids}) `;\n                }\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `${id}`).join(', ');\n                    whereClause += ` AND speciality_id IN (${quotedSpecialityIds})`;\n                }\n                if (fromdate && todate) {\n                    const fromdateObj = new Date(fromdate);\n                    const todateObj = new Date(todate);\n                    const dateDifferenceMilliseconds = todateObj.getTime() - fromdateObj.getTime(); // Calculate the difference in milliseconds\n                    daysDifference = (dateDifferenceMilliseconds / (1000 * 60 * 60 * 24)) + ' days'; // Convert milliseconds to days\n                    schCurTime = ` scheduled_date_time >= '${fromdate}'::DATE AND scheduled_date_time <= '${todate}'::DATE`;\n                    schPreTime = ` scheduled_date_time >= ('${fromdate}'::DATE - INTERVAL '${daysDifference}') AND scheduled_date_time <= '${fromdate}'::DATE`;\n                    visitCurTime = ` visit_date >= '${fromdate}'::DATE  AND visit_date < '${todate}'::DATE `;\n                    visitPreTime = ` visit_date >= ('${fromdate}'::DATE - INTERVAL '${daysDifference}') AND visit_date <= '${fromdate}'::DATE`;\n                }\n                if (month_id && month_id != 0) {\n                    let dayInMonth;\n                    const currentDate = new Date();\n                    const currentYear = currentDate.getFullYear();\n                    // Calculate the total days and start/end dates for the specified month\n                    dayInMonth = this.daysInMonth(currentYear, month_id);\n                    fromdate = this.formatDateToYYYYMMDD(dayInMonth.startDate);\n                    todate = this.formatDateToYYYYMMDD(dayInMonth.endDate);\n                    daysDifference = dayInMonth.totalDays + ' days';\n                    schCurTime = ` scheduled_date_time >= '${fromdate}'::DATE AND scheduled_date_time <= '${todate}'::DATE`;\n                    schPreTime = ` scheduled_date_time >= ('${fromdate}'::DATE - INTERVAL '${daysDifference}') AND scheduled_date_time <= '${fromdate}'::DATE`;\n                    visitCurTime = ` visit_date >= '${fromdate}'::DATE  AND visit_date < '${todate}'::DATE `;\n                    visitPreTime = ` visit_date >= ('${fromdate}'::DATE - INTERVAL '${daysDifference}') AND visit_date <= '${fromdate}'::DATE`;\n                }\n                const query = `WITH subquery AS (\r\n                SELECT\r\n                    (SELECT COUNT(*) FROM appointment_fact WHERE appointment_status_id = 13  AND cancelled_id != '1' AND ${schCurTime} ${whereClause} ) AS current_appointments,\r\n                    (SELECT COUNT(*) FROM appointment_fact WHERE appointment_status_id IS NOT NULL  AND ${schCurTime} ${whereClause}) AS current_total_appointments,\r\n                    (SELECT COUNT(*) FROM appointment_fact WHERE appointment_status_id = 13 AND cancelled_id != '1'  AND ${schPreTime} ${whereClause}) AS previous_appointments,\r\n                    (SELECT COUNT(*) FROM appointment_fact WHERE appointment_status_id IS NOT NULL AND ${schPreTime} ${whereClause}) AS previous_total_appointments\r\n            ),\r\n            subquery2 AS (\r\n                SELECT\r\n                    (SELECT COUNT(*) FROM appointment_fact WHERE  ${schCurTime} ${whereClause}) AS cancel_total,\r\n                    (SELECT COUNT(*) FROM appointment_fact WHERE (cancelled_id = '1' OR appointment_status_id = 2)  AND ${schCurTime} ${whereClause}) AS current_cancel,\r\n                    (SELECT COUNT(*) FROM appointment_fact WHERE ${schPreTime} ${whereClause}) AS previous_total,\r\n                    (SELECT COUNT(*) FROM appointment_fact WHERE (cancelled_id = '1' OR appointment_status_id = 2) AND ${schPreTime} ${whereClause}) AS previous_cancel\r\n            ),\r\n            subquery3 AS (\r\n                SELECT  \r\n                    (SELECT COUNT(*) FROM visits_fact WHERE visit_session_state_id IN (1)  AND ${visitCurTime} ${whereClause}) AS current_unfinalized,\r\n                    (SELECT COUNT(*) FROM visits_fact WHERE ${visitCurTime} ${whereClause}  ) AS current_unfinalized_total,\r\n                    (SELECT COUNT(*) FROM visits_fact WHERE visit_session_state_id IN (1) AND ${visitPreTime} ${whereClause}) AS previous_unfinalized,\r\n                    (SELECT COUNT(*) FROM visits_fact WHERE  ${visitPreTime} ${whereClause} ) AS previous_unfinalized_total\r\n            )\r\n            \r\n            SELECT\r\n                current_appointments,current_total_appointments,\r\n                previous_appointments,previous_total_appointments,\r\n                cancel_total,current_cancel,previous_total,previous_cancel,\r\n                current_unfinalized,current_unfinalized_total,previous_unfinalized,previous_unfinalized_total\r\n            FROM subquery,subquery2,subquery3`;\n                const info = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(query, { type: sequelize__WEBPACK_IMPORTED_MODULE_0__.QueryTypes.SELECT });\n                let queryData = info[0];\n                const Cancel_current = (queryData['current_cancel'] / queryData['cancel_total']) * 100 || 0;\n                const Cancel_previous = (queryData['previous_cancel'] / queryData['previous_total']) * 100 || 0;\n                change = Cancel_current - Cancel_previous;\n                const Cancel_changed = Math.abs((change / Cancel_previous) * 100) || 0;\n                const Cancel_is_Positive = (change) >= 0;\n                const Unfinalized_Visit_current = (queryData['current_unfinalized'] / queryData['current_unfinalized_total']) * 100 || 0;\n                const Unfinalized_Visit_previous = (queryData['previous_unfinalized'] / queryData['previous_unfinalized_total']) * 100 || 0;\n                change = Unfinalized_Visit_current - Unfinalized_Visit_previous;\n                const Unfinalized_Visit_changed = Math.abs((change / Unfinalized_Visit_previous) * 100) || 0;\n                const Unfinalized_is_Positive = (change) >= 0;\n                const Appointment_current = (queryData['current_appointments'] / queryData['current_total_appointments']) * 100 || 0;\n                const Appointment_previous = (queryData['previous_appointments'] / queryData['previous_total_appointments']) * 100 || 0;\n                change = Appointment_current - Appointment_previous;\n                const Appointment_changed = Math.abs((change / Appointment_previous) * 100) || 0;\n                const Appointment_is_Positive = (change) >= 0;\n                // Converting query data into required flat data as in contracts.\n                let flatData = {\n                    Appointment_current_number: queryData['current_appointments'] || 0,\n                    Appointment_current_total_number: queryData['current_total_appointments'] || 0,\n                    Appointment_previous_number: queryData['previous_appointments'] || 0,\n                    Appointment_previous_total_number: queryData['previous_total_appointments'] || 0,\n                    Appointment_current,\n                    Appointment_previous,\n                    Appointment_changed,\n                    Appointment_is_Positive,\n                    Cancel_current_number: queryData['current_cancel'] || 0,\n                    Cancel_current_total_number: queryData['cancel_total'] || 0,\n                    Cancel_previous_number: queryData['previous_cancel'] || 0,\n                    Cancel_previous_total_number: queryData['previous_total'] || 0,\n                    Cancel_current,\n                    Cancel_previous,\n                    Cancel_changed,\n                    Cancel_is_Positive,\n                    Unfinalized_Visit_current_number: queryData['current_unfinalized'],\n                    Unfinalized_Visit_current_total_number: queryData['current_unfinalized_total'] || 0,\n                    Unfinalized_Visit_previous_number: queryData['previous_unfinalized'] || 0,\n                    Unfinalized_Visit_previous_total_number: queryData['previous_unfinalized_total'] || 0,\n                    Unfinalized_Visit_current,\n                    Unfinalized_Visit_previous,\n                    Unfinalized_Visit_changed,\n                    Unfinalized_is_Positive,\n                };\n                const result = {};\n                for (const key in flatData) {\n                    if (typeof flatData[key] === 'number') {\n                        result[key] = flatData[key].toFixed(2);\n                    }\n                    else {\n                        result[key] = flatData[key];\n                    }\n                }\n                return result;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        this.getBillStatus = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { case_type_ids, month_id, speciality_ids, provider_ids, fromDate, toDate, time_span_id } = reqData;\n                let whereClause = `vf.deleted_at IS NULL`;\n                if (provider_ids.length === 1) {\n                    whereClause = `vf.deleted_at IS NULL AND provider_id = ${provider_ids} `;\n                }\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND speciality_id IN (${quotedSpecialityIds})`;\n                }\n                if (month_id) {\n                    const year = (new Date).getFullYear();\n                    whereClause += ` AND EXTRACT('month' from vf.visit_date) = ${month_id} \r\n                                  AND EXTRACT('year' from vf.visit_date)= ${year}`; // Fetch data of the selected month\n                }\n                if (case_type_ids && case_type_ids.length > 0) {\n                    const quotedCasetypeIds = case_type_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n                    whereClause += ` AND vf.case_type_id IN (${quotedCasetypeIds})`;\n                }\n                if (fromDate && toDate) {\n                    whereClause += ` AND vf.visit_date >= '${fromDate}' AND vf.visit_date <= '${toDate}'`;\n                }\n                // If time_span_id is provided, calculate the interval and update the SELECT clause\n                if (time_span_id) {\n                    let interval = '';\n                    switch (time_span_id) {\n                        case 1:\n                            interval = '1 week';\n                            break;\n                        case 2:\n                            interval = '1 month';\n                            break;\n                        case 3:\n                            interval = '6 months';\n                            break;\n                        case 4:\n                            interval = '11 months';\n                            break;\n                        case 5:\n                            const currentDate = new Date();\n                            const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n                            const daysDifference = Math.floor((currentDate.getTime() - firstDayOfMonth.getTime()) / (1000 * 60 * 60 * 24));\n                            interval = `${daysDifference} days`; // Extracts days from the start of the month to the current date\n                            break;\n                        default:\n                            interval = '1 week';\n                    }\n                    whereClause += ` AND vf.visit_date >= current_date - interval '${interval}'\r\n                                   AND vf.visit_date < current_date`;\n                }\n                const bill_status_Query = `\r\n                SELECT\r\n                COUNT(*) AS unfinalized_visit,\r\n                current_date - vf.visit_date AS date_difference\r\n                FROM\r\n                    visits_fact AS vf\r\n                LEFT JOIN\r\n                    visit_session_state_dim AS vssd ON vf.visit_session_state_id = CAST(vssd.visit_session_state_id as integer)\r\n                WHERE\r\n                ${whereClause}\r\n                GROUP BY\r\n                    date_difference\r\n                ORDER BY\r\n                    date_difference;\r\n                `;\n                const [results] = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(bill_status_Query);\n                return results;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        // public getBillStatus = async (reqData: typings.GenericReqObjI): Promise<object> => {\n        //     try {\n        //         const {\n        //             case_type_ids,\n        //             speciality_ids,\n        //             provider_ids,\n        //         }: GlobalFiltersRequest[\"user\"] = reqData;\n        //         let whereClause: string = `vf.deleted_at IS NULL`;\n        //         if (provider_ids.length === 1) {\n        //             whereClause = `vf.deleted_at IS NULL AND provider_id = ${provider_ids} `;\n        //         }\n        //         if (speciality_ids && speciality_ids.length > 0) {\n        //             const quotedSpecialityIds: string = speciality_ids.map(id => `'${id}'`).join(', ');\n        //             whereClause += ` AND speciality_id IN (${quotedSpecialityIds})`;\n        //         }\n        //         if (case_type_ids && case_type_ids.length > 0) {\n        //             const quotedCasetypeIds: string = case_type_ids.map(id => `'${id}'`).join(', '); // Adding single quotes around each value\n        //             whereClause += ` AND vf.case_type_id IN (${quotedCasetypeIds})`;\n        //         }\n        //         const bill_status_Query: string = `\n        //             SELECT\n        //             COUNT(*) AS unfinalized_visit,\n        //             current_date - vf.visit_date AS date_difference\n        //             FROM\n        //                 visits_fact AS vf\n        //             LEFT JOIN\n        //                 visit_session_state_dim AS vssd ON vf.visit_session_state_id = CAST(vssd.visit_session_state_id as integer)\n        //             WHERE\n        //             ${whereClause}\n        //             GROUP BY\n        //                 date_difference\n        //             ORDER BY\n        //                 date_difference;\n        //             `;\n        //         const [results] = await sequelize.query(bill_status_Query);\n        //         return results;\n        //     } catch (error) {\n        //         throw error\n        //     }\n        // }\n        this.getMissingVisitStatus = (reqData) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { month_id, speciality_ids, provider_ids, fromDate, toDate, time_span_id } = reqData;\n                let whereClause = `vf.deleted_at IS NULL`;\n                if (provider_ids.length === 1) {\n                    whereClause = `vf.deleted_at IS NULL AND provider_id = ${provider_ids} `;\n                }\n                if (speciality_ids && speciality_ids.length > 0) {\n                    const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', ');\n                    whereClause += ` AND speciality_id IN (${quotedSpecialityIds})`;\n                }\n                if (month_id) {\n                    const year = (new Date).getFullYear();\n                    whereClause += ` AND EXTRACT('month' from vf.visit_date) = ${month_id} \r\n                                  AND EXTRACT('year' from vf.visit_date)= ${year}`; // Fetch data of the selected month\n                }\n                if (fromDate && toDate) {\n                    whereClause += ` AND vf.visit_date >= '${fromDate}' AND vf.visit_date <= '${toDate}'`;\n                }\n                // If time_span_id is provided, calculate the interval and update the SELECT clause\n                if (time_span_id) {\n                    let interval = '';\n                    switch (time_span_id) {\n                        case 1:\n                            interval = '1 week';\n                            break;\n                        case 2:\n                            interval = '1 month';\n                            break;\n                        case 3:\n                            interval = '6 months';\n                            break;\n                        case 4:\n                            interval = '11 months';\n                            break;\n                        case 5:\n                            const currentDate = new Date();\n                            const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n                            const daysDifference = Math.floor((currentDate.getTime() - firstDayOfMonth.getTime()) / (1000 * 60 * 60 * 24));\n                            interval = `${daysDifference} days`; // Extracts days from the start of the month to the current date\n                            break;\n                        default:\n                            interval = '1 week';\n                    }\n                    whereClause += ` AND vf.visit_date >= current_date - interval '${interval}'\r\n                                   AND vf.visit_date < current_date`;\n                }\n                const visitQuery = `\r\n            SELECT\r\n            COALESCE(\r\n                CASE\r\n                    WHEN ctd.name = 'NoFault/Workers Comp' THEN '50/50'\r\n                    ELSE ctd.name\r\n                END,\r\n                'Total'\r\n                ) AS case_type_name,\r\n                COUNT(CASE WHEN vf.visit_icd_code_status::integer = 0 THEN 1 END) AS missing_icd,\r\n                COUNT(CASE WHEN vf.visit_cpt_code_status::integer = 0 THEN 1 END) AS missing_cpt,\r\n                COUNT(CASE WHEN vf.document_uploaded::Boolean = false THEN 1 END) AS missing_document  \r\n            FROM\r\n                visits_fact vf\r\n            JOIN\r\n                case_types_dim ctd ON vf.case_type_id = ctd.case_type_id\r\n            WHERE ${whereClause}\r\n            GROUP BY\r\n                GROUPING SETS ((ctd.name), ())\r\n            ORDER BY\r\n                CASE WHEN COALESCE(\r\n                        CASE\r\n                            WHEN ctd.name = 'NoFault/Workers Comp' THEN '50/50'\r\n                            ELSE ctd.name\r\n                        END,\r\n                        'Total'\r\n                    ) = 'Total' THEN 1 ELSE 0 END,\r\n                    case_type_name;\r\n                `;\n                const [results] = yield _config_database__WEBPACK_IMPORTED_MODULE_1__.sequelize.query(visitQuery);\n                return results;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n        this.__http = new http();\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/services/provider.service.ts?");

/***/ }),

/***/ "./src/services/user.service.ts":
/*!**************************************!*\
  !*** ./src/services/user.service.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UserService: () => (/* binding */ UserService)\n/* harmony export */ });\n/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared */ \"./src/shared/index.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./src/utils/index.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nclass UserService extends _shared__WEBPACK_IMPORTED_MODULE_0__.Helper {\n    constructor(__repo, http) {\n        super();\n        this.__repo = __repo;\n        this.http = http;\n        this.get = (reqData, _authorization) => __awaiter(this, void 0, void 0, function* () {\n            const { id } = reqData;\n            if (!id) {\n                return this.__repo.findAll();\n            }\n            const user = this.shallowCopy(yield this.__repo.findById(id));\n            if (!user || !Object.keys(user).length) {\n                throw (0,_utils__WEBPACK_IMPORTED_MODULE_1__.generateMessages)('NO_RECORD_FOUND');\n            }\n            return user;\n        });\n        this.__http = new http();\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/services/user.service.ts?");

/***/ }),

/***/ "./src/shared/base-repository.ts":
/*!***************************************!*\
  !*** ./src/shared/base-repository.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseRepository: () => (/* binding */ BaseRepository)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass BaseRepository {\n    constructor(model) {\n        this.model = model;\n    }\n    executeRawQuery(sql) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.model.sequelize.query(sql);\n        });\n    }\n    getCustomPaginate(options, currentPage, limitTo, optionsForCalculateTotal, include) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const offset = (currentPage - 1) * limitTo;\n            const results = yield this.model.findAndCountAll(Object.assign(Object.assign(Object.assign({}, options), { offset, limit: limitTo }), include));\n            const lastPage = (results === null || results === void 0 ? void 0 : results.count) > 0 ? Math.ceil((results === null || results === void 0 ? void 0 : results.count) / limitTo) : 0;\n            const hasMorePages = currentPage < lastPage;\n            return { no_of_pages: lastPage, total: results === null || results === void 0 ? void 0 : results.count, page_number: currentPage, is_last: !hasMorePages, docs: results === null || results === void 0 ? void 0 : results.rows };\n        });\n    }\n    bulkCreate(data, transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.model.bulkCreate(data, { transaction });\n        });\n    }\n    bulkUpdate(data, transaction, fields, updateOnDuplicate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.model.bulkCreate(data, { fields, updateOnDuplicate, transaction });\n        });\n    }\n    count(column, where, include) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.model.count(Object.assign({ col: column, where: Object.assign({}, where), distinct: true }, include));\n        });\n    }\n    create(data, transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.model.create(data, { transaction });\n        });\n    }\n    destroy(id, _where, transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!id || !_where) {\n                return null;\n            }\n            const where = id ? { id } : _where;\n            return this.model.destroy({ where, transaction });\n        });\n    }\n    exists(id, _where) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (id) {\n                const task = yield this.findById(id);\n                return (task && Object.keys(task).length) ? true : false;\n            }\n            const tasks = yield this.findAll(_where);\n            return tasks && tasks.length ? true : false;\n        });\n    }\n    findAll(filter, options, transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.model.findAll(Object.assign(Object.assign({ where: Object.assign({}, filter) }, options), { transaction }));\n        });\n    }\n    findById(identifier, options, transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.model.findByPk(identifier, Object.assign(Object.assign({}, options), { transaction }));\n        });\n    }\n    findOne(projections, options, transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.model.findOne(Object.assign(Object.assign({ where: Object.assign({}, projections) }, options), { transaction }));\n        });\n    }\n    update(id, obj, transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const [number] = yield this.model.update(Object.assign({}, obj), { where: { id }, individualHooks: true, transaction });\n            return (number) ? this.findById(id) : null;\n        });\n    }\n    updateByColumnMatched(target, obj, transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const [number] = yield this.model.update(Object.assign({}, obj), { where: Object.assign({}, target), individualHooks: true, transaction });\n            return number;\n        });\n    }\n    updateByReferenceIds(ids, obj, transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const [number] = yield this.model.update(Object.assign({}, obj), { where: Object.assign({}, ids), individualHooks: true, transaction });\n            return (number) ? this.model.findAll({ where: Object.assign({}, ids) }) : null;\n        });\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/shared/base-repository.ts?");

/***/ }),

/***/ "./src/shared/global.filter.query.helper.ts":
/*!**************************************************!*\
  !*** ./src/shared/global.filter.query.helper.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GlobalFilterQueryHelper: () => (/* binding */ GlobalFilterQueryHelper)\n/* harmony export */ });\nfunction GlobalFilterQueryHelper(reqData) {\n    // Destructure the input data\n    const { time_span_id, month_id, speciality_ids, provider_ids, facility_location_ids, fromDate, toDate, case_type_ids, granularity_type_id, } = reqData;\n    // Start with a default WHERE clause\n    let whereClause = `bf.deleted_at is Null `;\n    // If speciality_ids are provided, filter by them\n    if (speciality_ids && speciality_ids.length > 0) {\n        const quotedSpecialityIds = speciality_ids.map(id => `'${id}'`).join(', ');\n        whereClause += ` AND bf.speciality_id IN (${quotedSpecialityIds})`;\n    }\n    if (case_type_ids && case_type_ids.length > 0) {\n        const quotedcasetypeIds = case_type_ids.map(id => `'${id}'`).join(', ');\n        whereClause += ` AND bf.case_type_id IN (${quotedcasetypeIds})`;\n    }\n    // If month_id is provided, filter by the specified month\n    if (month_id) {\n        const year = (new Date).getFullYear();\n        const create_startDate = new Date(year, month_id - 1, 1);\n        const create_endDate = new Date(year, month_id - 1, 1);\n        create_endDate.setMonth(create_startDate.getMonth() + 1);\n        create_endDate.setDate(create_endDate.getDate() - 1);\n        const startDate = create_startDate.toISOString().split('T')[0];\n        const endDate = create_endDate.toISOString().split('T')[0];\n        whereClause += ` AND bf.bill_date >= '${startDate}'::DATE AND bf.bill_date <= '${endDate}'::DATE `;\n    }\n    // If provider_ids are provided, filter by them\n    if (provider_ids && provider_ids.length > 0) {\n        const quotedProviderIds = provider_ids.map(id => `'${id}'`).join(', ');\n        whereClause += ` AND bf.doctor_id IN (${quotedProviderIds})`;\n    }\n    // If facility_location_ids are provided, filter by them\n    if (facility_location_ids && facility_location_ids.length > 0) {\n        const quotedLocationIds = facility_location_ids.map(id => `'${id}'`).join(', ');\n        whereClause += ` AND bf.facility_location_id IN (${quotedLocationIds})`;\n    }\n    // If fromDate and toDate are provided, filter by date range\n    if (fromDate && toDate) {\n        whereClause += ` AND bill_date >= '${fromDate}' AND bill_date <= '${toDate}' `;\n    }\n    // If time_span_id is provided, filter by the specified time span\n    if (time_span_id) {\n        let interval = '';\n        switch (time_span_id) {\n            case 1:\n                interval = '1 week';\n                break;\n            case 2:\n                interval = '1 month';\n                break;\n            case 3:\n                interval = '6 months';\n                break;\n            case 4:\n                interval = '1 year';\n                break;\n            case 5:\n                const currentDate = new Date();\n                const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n                const daysDifference = Math.floor((currentDate.getTime() - firstDayOfMonth.getTime()) / (1000 * 60 * 60 * 24));\n                interval = `${daysDifference} days`;\n                break;\n            default:\n                interval = '1 week';\n        }\n        // Filter by the calculated interval\n        whereClause += ` AND bill_date >= current_date - interval '${interval}' AND bill_date < current_date`;\n    }\n    return whereClause;\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/shared/global.filter.query.helper.ts?");

/***/ }),

/***/ "./src/shared/helper.ts":
/*!******************************!*\
  !*** ./src/shared/helper.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Helper: () => (/* binding */ Helper)\n/* harmony export */ });\nclass Helper {\n    constructor() {\n        this.filterNonEmpty = (arr) => arr.filter((value) => JSON.stringify(value) !== '[]');\n        this.filterNonNull = (arr) => arr.filter((e) => e !== null && e !== undefined);\n        this.filterUnique = (data) => data.filter((v, i, a) => a.indexOf(v) === i);\n        this.cutomPaginate = (array, page_size, page_number) => array.slice((page_number - 1) * page_size, page_number * page_size);\n        this.shallowCopy = (data) => JSON.parse(JSON.stringify(data));\n        this.sort = (items, attribute) => items.sort((a, b) => a[`${String(attribute)}`] - b[`${String(attribute)}`]);\n        this.daysInMonth = (year, month) => {\n            let nextMonth, nextYear;\n            nextMonth = month + 1;\n            nextYear = year;\n            // Get the first day of the next month (start of the current month)\n            const startOfMonth = new Date(year, month - 1, 1); // Month is 0-indexed\n            // Calculate the last day of the current month (subtract 1 day from the start of next month)\n            const endOfMonth = new Date(nextYear, nextMonth - 1, 0);\n            // Special case: if the specified month is the current month, set endDate to the current date\n            if (startOfMonth.getMonth() === new Date().getMonth()) {\n                startOfMonth.setHours(0, 0, 0, 0); // Set time to midnight\n                endOfMonth.setHours(0, 0, 0, 0); // Set time to midnight\n                endOfMonth.setDate(new Date().getDate()); // Set endDate to the current date\n            }\n            const totalDays = (endOfMonth.getDate() - startOfMonth.getDate()) + 1;\n            return {\n                totalDays: totalDays,\n                startDate: startOfMonth,\n                endDate: endOfMonth,\n            };\n        };\n    }\n    formatDateToYYYYMMDD(date) {\n        return date.toISOString().split('T')[0];\n    }\n}\n\n\n//# sourceURL=webpack://ovada_analytics/./src/shared/helper.ts?");

/***/ }),

/***/ "./src/shared/http.ts":
/*!****************************!*\
  !*** ./src/shared/http.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Http: () => (/* binding */ Http),\n/* harmony export */   _http: () => (/* binding */ _http)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// tslint:disable-next-line: match-default-export-name\n\nclass Http {\n    constructor() {\n        this.get = (url, headers) => __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            try {\n                const response = yield axios__WEBPACK_IMPORTED_MODULE_0___default().get(url, headers);\n                return response === null || response === void 0 ? void 0 : response.data;\n            }\n            catch (error) {\n                throw Object.assign(Object.assign({}, (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data), { status: (_b = error === null || error === void 0 ? void 0 : error.response) === null || _b === void 0 ? void 0 : _b.status });\n            }\n        });\n        this.post = (url, data, headers) => __awaiter(this, void 0, void 0, function* () {\n            var _c, _d;\n            try {\n                const response = yield axios__WEBPACK_IMPORTED_MODULE_0___default().post(url, data, headers);\n                return response.data;\n            }\n            catch (error) {\n                throw Object.assign(Object.assign({}, (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.data), { status: (_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.status });\n            }\n        });\n        this.put = (url, data, headers) => __awaiter(this, void 0, void 0, function* () {\n            var _e, _f;\n            try {\n                const response = yield axios__WEBPACK_IMPORTED_MODULE_0___default().put(url, data, headers);\n                return response.data;\n            }\n            catch (error) {\n                throw Object.assign(Object.assign({}, (_e = error === null || error === void 0 ? void 0 : error.response) === null || _e === void 0 ? void 0 : _e.data), { status: (_f = error === null || error === void 0 ? void 0 : error.response) === null || _f === void 0 ? void 0 : _f.status });\n            }\n        });\n        this.webhook = (url, data, headers) => {\n            try {\n                const result = axios__WEBPACK_IMPORTED_MODULE_0___default().post(url, data, headers);\n                return null;\n            }\n            catch (error) {\n                console.log('error', error);\n                throw error.response ? error.response.data : Object.assign({}, error.data);\n            }\n        };\n    }\n}\nconst _http = new Http();\n\n\n//# sourceURL=webpack://ovada_analytics/./src/shared/http.ts?");

/***/ }),

/***/ "./src/shared/index.ts":
/*!*****************************!*\
  !*** ./src/shared/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseRepository: () => (/* reexport safe */ _base_repository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository),\n/* harmony export */   Helper: () => (/* reexport safe */ _helper__WEBPACK_IMPORTED_MODULE_1__.Helper),\n/* harmony export */   Http: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_2__.Http),\n/* harmony export */   _http: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_2__._http)\n/* harmony export */ });\n/* harmony import */ var _base_repository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base-repository */ \"./src/shared/base-repository.ts\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helper */ \"./src/shared/helper.ts\");\n/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./http */ \"./src/shared/http.ts\");\n\n\n\n\n\n//# sourceURL=webpack://ovada_analytics/./src/shared/index.ts?");

/***/ }),

/***/ "./src/utils/error-handler.ts":
/*!************************************!*\
  !*** ./src/utils/error-handler.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   errorHandler: () => (/* binding */ errorHandler)\n/* harmony export */ });\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dotenv */ \"dotenv\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dotenv__WEBPACK_IMPORTED_MODULE_0__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\ndotenv__WEBPACK_IMPORTED_MODULE_0__.config({ path: '../.env' });\nconst errorHandler = (error, _req, res, _next) => __awaiter(void 0, void 0, void 0, function* () {\n    if (process.env.NODE_ENVR !== 'production') {\n        console.log('error', error);\n    }\n    if (error.errors && Array.isArray(error.errors)) {\n        return res.status(406).json({\n            message: error.errors[0],\n            errors: process.env.NODE_ENVR === 'production' ? null : error.errors\n        });\n    }\n    return res.status(error.status || 406).json({\n        message: error.message || error.name || error,\n        errors: process.env.NODE_ENVR === 'production' ? null : error.errors\n    });\n});\n\n\n//# sourceURL=webpack://ovada_analytics/./src/utils/error-handler.ts?");

/***/ }),

/***/ "./src/utils/generate-message.ts":
/*!***************************************!*\
  !*** ./src/utils/generate-message.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateMessages: () => (/* binding */ generateMessages)\n/* harmony export */ });\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dotenv */ \"dotenv\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dotenv__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _config_codes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/codes */ \"./src/config/codes.ts\");\n\n\ndotenv__WEBPACK_IMPORTED_MODULE_0__.config({ path: '../.env' });\nconst generateMessages = (code, validator) => {\n    if (validator) {\n        return _config_codes__WEBPACK_IMPORTED_MODULE_1__.responses[`${process.env.ENV_LANG}`].validator[`${code}`];\n    }\n    return _config_codes__WEBPACK_IMPORTED_MODULE_1__.responses[`${process.env.ENV_LANG}`][`${code}`];\n};\n\n\n//# sourceURL=webpack://ovada_analytics/./src/utils/generate-message.ts?");

/***/ }),

/***/ "./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   errorHandler: () => (/* reexport safe */ _error_handler__WEBPACK_IMPORTED_MODULE_1__.errorHandler),\n/* harmony export */   generateMessages: () => (/* reexport safe */ _generate_message__WEBPACK_IMPORTED_MODULE_0__.generateMessages)\n/* harmony export */ });\n/* harmony import */ var _generate_message__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generate-message */ \"./src/utils/generate-message.ts\");\n/* harmony import */ var _error_handler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error-handler */ \"./src/utils/error-handler.ts\");\n\n\n\n\n//# sourceURL=webpack://ovada_analytics/./src/utils/index.ts?");

/***/ }),

/***/ "./src/utils/request-logger.ts":
/*!*************************************!*\
  !*** ./src/utils/request-logger.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requestLoggerMiddleWare: () => (/* binding */ requestLoggerMiddleWare)\n/* harmony export */ });\n/* harmony import */ var _utils_generate_message__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/generate-message */ \"./src/utils/generate-message.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass RequestLoggerMiddleWare {\n    constructor() {\n        this.logger = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { locals: { data: { message_code: messageCode, result: resultData, message, status } } } = res;\n                const resObjMessage = messageCode ? Object.assign({}, (0,_utils_generate_message__WEBPACK_IMPORTED_MODULE_0__.generateMessages)(messageCode)) : {\n                    message\n                };\n                res.status(200).json(Object.assign(Object.assign({}, resObjMessage), { result: Object.assign({}, resultData), status: status ? status : 200 }));\n                return undefined;\n            }\n            catch (err) {\n                next(err);\n            }\n        });\n    }\n}\nconst requestLoggerMiddleWare = new RequestLoggerMiddleWare();\n\n\n//# sourceURL=webpack://ovada_analytics/./src/utils/request-logger.ts?");

/***/ }),

/***/ "./src/utils/requestValidation/request_validation.ts":
/*!***********************************************************!*\
  !*** ./src/utils/requestValidation/request_validation.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateQuery: () => (/* binding */ validateQuery)\n/* harmony export */ });\nlet validateQuery = (query) => {\n    try {\n        let toDateCheck, fromDateCheck;\n        // !query && query.length <= 0\n        if (!query && query.length <= 0 || ((query.time_span_id === '' || query.time_span_id === 0) && (query.month_id === '' || query.month_id === 0) && (query.speciality_ids).length === 0 && (query.case_type_ids).length === 0 && (query.provider_ids).length === 0 && (query.facility_location_ids).length === 0 && query.fromDate === '' && query.toDate === '' && (query.granularity_type_id === '' || query.granularity_type_id === 0))) {\n            return \"query is empty. Need at least one date filter\";\n        }\n        else {\n            // validating filter size and names\n            const newInterface = {\n                time_span_id: 0,\n                month_id: 0,\n                facility_location_ids: [],\n                speciality_ids: [],\n                provider_ids: [],\n                case_type_ids: [],\n                fromDate: new Date,\n                toDate: new Date,\n                granularity_type_id: 0,\n            };\n            const keysInInterface = Object.keys(newInterface);\n            // const requestKeys: string[] = Object.keys(query);\n            // const keysInInterface = ['time_span_id','month_id','facility_location_ids','speciality_ids','provider_ids','fromDate','toDate','granularity_type_id'];\n            const keysInRequest = Object.keys(query);\n            console.log(keysInRequest);\n            console.log(keysInInterface);\n            const missingKeys = keysInInterface.filter(key => !keysInRequest.includes(key));\n            if (missingKeys.length > 0) {\n                return `${missingKeys} Invalid arguments`;\n            }\n            // Check if there are any extra keys in the requestfromdateto\n            const extraKeys = keysInRequest.filter(key => !keysInInterface.includes(key));\n            if (extraKeys.length > 0) {\n                return `Invalid filters in the request: ${extraKeys.join(', ')}`;\n            }\n            const { time_span_id, month_id, facility_location_ids, speciality_ids, provider_ids, fromDate, toDate, granularity_type_id, case_type_ids } = query;\n            //console.log(month_id,time_span_id,\"In queryyyyyyyyyyyyyyyyyyyyyyyyyyyyyy elseeee\")\n            if (time_span_id) {\n                // console.log(\"yessssssssssss\")\n            }\n            if ((time_span_id && month_id) || (month_id && (fromDate || toDate)) || (time_span_id && (fromDate || toDate))) {\n                return \"Cannot pass more than one date filter\";\n            }\n            else if ((fromDate && !toDate) || (toDate && !fromDate)) {\n                return \"both fromDate and toDate required\";\n            }\n            else if ((fromDate && toDate) && !granularity_type_id) {\n                return 'gran required with dates';\n            }\n            else if ((granularity_type_id && !(fromDate && toDate)) || (granularity_type_id && (month_id || time_span_id))) {\n                return \" Granularity can only be given with fromDate and toDate\";\n            }\n            else {\n                if (time_span_id) {\n                    if (typeof (time_span_id) != \"number\") {\n                        console.log(\"time_span_id must be a number\");\n                        return \"time_span_id must be a number\";\n                    }\n                    if (time_span_id > 5 || time_span_id <= 0) {\n                        return \"time_span_id must lie between 1 and 5\";\n                    }\n                }\n                if (month_id) {\n                    const date = new Date();\n                    let month = date.getMonth() + 1;\n                    if (typeof (month_id) != \"number\") {\n                        return \"month_id must be a number\";\n                    }\n                    if (month_id > month || month_id <= 0) {\n                        return `month_id must lie between 1 and ${month}`;\n                    }\n                }\n                if (granularity_type_id) {\n                    if (typeof (granularity_type_id) != \"number\") {\n                        return \"granularity_type_id must be a number\";\n                    }\n                    if (granularity_type_id > 4 || granularity_type_id < 1) {\n                        return \"granularity_type_id must lie between 1 and 4\";\n                    }\n                }\n                if (facility_location_ids && facility_location_ids.length > 0 && (!(Array.isArray(facility_location_ids)) || facility_location_ids.every((item) => typeof item != 'number'))) {\n                    return \"facility_location_ids must be an array of numbers\";\n                }\n                if (speciality_ids && speciality_ids.length > 0 && (!(Array.isArray(speciality_ids)) || speciality_ids.every((item) => typeof item != 'number'))) {\n                    return \"speciality_ids must be an array of numbers\";\n                }\n                if (provider_ids && provider_ids.length > 0 && (!(Array.isArray(provider_ids)) || provider_ids.every((item) => typeof item != 'number'))) {\n                    return \"provider_ids must be an array of numbers\";\n                }\n                if (case_type_ids && case_type_ids.length > 0 && (!(Array.isArray(case_type_ids)) || case_type_ids.every((item) => typeof item != 'number'))) {\n                    return \"case_type_ids must be an array of numbers\";\n                }\n                if (fromDate && (typeof fromDate === \"string\")) {\n                    const dateParts = fromDate.split(\"-\");\n                    if (dateParts.length === 3) {\n                        const year = parseInt(dateParts[0], 10);\n                        const month = parseInt(dateParts[1], 10);\n                        const day = parseInt(dateParts[2], 10);\n                        if (!isNaN(year) && !isNaN(month) && !isNaN(day)) {\n                            fromDateCheck = new Date(`${year}-${month}-${day}`);\n                            if (isNaN(fromDateCheck.getTime())) {\n                                return \"invalid FROM-DATE\";\n                            }\n                        }\n                    }\n                    else {\n                        return 'Invalid Date Parts in FROM-DATE';\n                    }\n                }\n                if (toDate && (typeof toDate === \"string\")) {\n                    const dateParts = toDate.split(\"-\");\n                    if (dateParts.length === 3) {\n                        const year = parseInt(dateParts[0], 10);\n                        const month = parseInt(dateParts[1], 10);\n                        const day = parseInt(dateParts[2], 10);\n                        if (!isNaN(year) && !isNaN(month) && !isNaN(day)) {\n                            toDateCheck = new Date(`${year}-${month}-${day}`);\n                            console.log(\"new dare\", toDateCheck);\n                            if (isNaN(toDateCheck.getTime())) {\n                                return \"invalid TO-DATE\";\n                            }\n                        }\n                    }\n                    else {\n                        return 'Invalid Date Parts in TO-DATE';\n                    }\n                }\n                if (toDateCheck <= fromDateCheck) {\n                    return \"toDate must be greater than from date\";\n                }\n                else {\n                    return true;\n                }\n            }\n        }\n    }\n    catch (error) {\n        return \"error\";\n    }\n};\n\n\n//# sourceURL=webpack://ovada_analytics/./src/utils/requestValidation/request_validation.ts?");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "chalk":
/*!************************!*\
  !*** external "chalk" ***!
  \************************/
/***/ ((module) => {

module.exports = require("chalk");

/***/ }),

/***/ "connect-timeout":
/*!**********************************!*\
  !*** external "connect-timeout" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("connect-timeout");

/***/ }),

/***/ "cors":
/*!***********************!*\
  !*** external "cors" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("cors");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("dotenv");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("express");

/***/ }),

/***/ "helmet":
/*!*************************!*\
  !*** external "helmet" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("helmet");

/***/ }),

/***/ "morgan":
/*!*************************!*\
  !*** external "morgan" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("morgan");

/***/ }),

/***/ "sequelize":
/*!****************************!*\
  !*** external "sequelize" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("sequelize");

/***/ }),

/***/ "sequelize-typescript":
/*!***************************************!*\
  !*** external "sequelize-typescript" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("sequelize-typescript");

/***/ }),

/***/ "swagger-jsdoc":
/*!********************************!*\
  !*** external "swagger-jsdoc" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("swagger-jsdoc");

/***/ }),

/***/ "swagger-ui-express":
/*!*************************************!*\
  !*** external "swagger-ui-express" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("swagger-ui-express");

/***/ }),

/***/ "xss-clean":
/*!****************************!*\
  !*** external "xss-clean" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("xss-clean");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/app.ts");
/******/ 	
/******/ })()
;